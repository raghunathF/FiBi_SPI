
FinchBit_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c1c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00001c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  20000010  00001c2c  00020010  2**2
                  ALLOC
  3 .stack        00000404  2000012c  00001d48  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f3cb  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047f9  00000000  00000000  0004f45c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005375  00000000  00000000  00053c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000650  00000000  00000000  00058fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000670  00000000  00000000  0005961a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007ccb  00000000  00000000  00059c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f833  00000000  00000000  00061955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00070771  00000000  00000000  00071188  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e18  00000000  00000000  000e18fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 05 00 20 11 19 00 00 0d 19 00 00 0d 19 00 00     0.. ............
	...
      2c:	0d 19 00 00 00 00 00 00 00 00 00 00 0d 19 00 00     ................
      3c:	0d 19 00 00 0d 19 00 00 0d 19 00 00 0d 19 00 00     ................
      4c:	0d 19 00 00 d5 11 00 00 0d 19 00 00 0d 19 00 00     ................
      5c:	00 00 00 00 0d 19 00 00 a5 11 00 00 b5 11 00 00     ................
      6c:	c5 11 00 00 19 0c 00 00 85 11 00 00 95 11 00 00     ................
      7c:	ed 00 00 00 0d 19 00 00 0d 19 00 00 0d 19 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000010 	.word	0x20000010
      ac:	00000000 	.word	0x00000000
      b0:	00001c1c 	.word	0x00001c1c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000014 	.word	0x20000014
      e0:	00001c1c 	.word	0x00001c1c
      e4:	00001c1c 	.word	0x00001c1c
      e8:	00000000 	.word	0x00000000

000000ec <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
      ee:	4b2e      	ldr	r3, [pc, #184]	; (1a8 <ADC_Handler+0xbc>)
      f0:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
      f2:	6823      	ldr	r3, [r4, #0]
      f4:	7e1d      	ldrb	r5, [r3, #24]
      f6:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
      f8:	07ea      	lsls	r2, r5, #31
      fa:	d505      	bpl.n	108 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
      fc:	7ee2      	ldrb	r2, [r4, #27]
      fe:	07d2      	lsls	r2, r2, #31
     100:	d502      	bpl.n	108 <ADC_Handler+0x1c>
     102:	7ea2      	ldrb	r2, [r4, #26]
     104:	07d2      	lsls	r2, r2, #31
     106:	d416      	bmi.n	136 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     108:	076b      	lsls	r3, r5, #29
     10a:	d508      	bpl.n	11e <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     10c:	2304      	movs	r3, #4
     10e:	6822      	ldr	r2, [r4, #0]
     110:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     112:	7ee3      	ldrb	r3, [r4, #27]
     114:	079b      	lsls	r3, r3, #30
     116:	d502      	bpl.n	11e <ADC_Handler+0x32>
     118:	7ea3      	ldrb	r3, [r4, #26]
     11a:	079b      	lsls	r3, r3, #30
     11c:	d43c      	bmi.n	198 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     11e:	07ab      	lsls	r3, r5, #30
     120:	d508      	bpl.n	134 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     122:	2302      	movs	r3, #2
     124:	6822      	ldr	r2, [r4, #0]
     126:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     128:	7ee3      	ldrb	r3, [r4, #27]
     12a:	075b      	lsls	r3, r3, #29
     12c:	d502      	bpl.n	134 <ADC_Handler+0x48>
     12e:	7ea3      	ldrb	r3, [r4, #26]
     130:	075b      	lsls	r3, r3, #29
     132:	d435      	bmi.n	1a0 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     134:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     136:	2201      	movs	r2, #1
     138:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     13a:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     13c:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     13e:	b25b      	sxtb	r3, r3
     140:	2b00      	cmp	r3, #0
     142:	dbfb      	blt.n	13c <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     144:	6961      	ldr	r1, [r4, #20]
     146:	1c8b      	adds	r3, r1, #2
     148:	6163      	str	r3, [r4, #20]
     14a:	8b53      	ldrh	r3, [r2, #26]
     14c:	b29b      	uxth	r3, r3
     14e:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     150:	8b23      	ldrh	r3, [r4, #24]
     152:	3b01      	subs	r3, #1
     154:	b29b      	uxth	r3, r3
     156:	8323      	strh	r3, [r4, #24]
     158:	2b00      	cmp	r3, #0
     15a:	d011      	beq.n	180 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     15c:	7f63      	ldrb	r3, [r4, #29]
     15e:	2b00      	cmp	r3, #0
     160:	d0d2      	beq.n	108 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     162:	6822      	ldr	r2, [r4, #0]
     164:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     166:	b25b      	sxtb	r3, r3
     168:	2b00      	cmp	r3, #0
     16a:	dbfb      	blt.n	164 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     16c:	7b13      	ldrb	r3, [r2, #12]
     16e:	2102      	movs	r1, #2
     170:	430b      	orrs	r3, r1
     172:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     174:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     176:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     178:	b25b      	sxtb	r3, r3
     17a:	2b00      	cmp	r3, #0
     17c:	dbfb      	blt.n	176 <ADC_Handler+0x8a>
     17e:	e7c3      	b.n	108 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     180:	7f23      	ldrb	r3, [r4, #28]
     182:	2b05      	cmp	r3, #5
     184:	d1c0      	bne.n	108 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     186:	2300      	movs	r3, #0
     188:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     18a:	3301      	adds	r3, #1
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     190:	0020      	movs	r0, r4
     192:	68a3      	ldr	r3, [r4, #8]
     194:	4798      	blx	r3
     196:	e7b7      	b.n	108 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     198:	0020      	movs	r0, r4
     19a:	68e3      	ldr	r3, [r4, #12]
     19c:	4798      	blx	r3
     19e:	e7be      	b.n	11e <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1a0:	6923      	ldr	r3, [r4, #16]
     1a2:	0020      	movs	r0, r4
     1a4:	4798      	blx	r3
}
     1a6:	e7c5      	b.n	134 <ADC_Handler+0x48>
     1a8:	200000ac 	.word	0x200000ac

000001ac <config_timer_waveform>:
static struct tcc_module tcc_instance0;
//static volatile uint8_t old_left_dir = 0;
//static volatile uint8_t old_right_dir = 0;

void config_timer_waveform()
{
     1ac:	b570      	push	{r4, r5, r6, lr}
     1ae:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
     1b0:	4d20      	ldr	r5, [pc, #128]	; (234 <config_timer_waveform+0x88>)
     1b2:	ac01      	add	r4, sp, #4
     1b4:	0029      	movs	r1, r5
     1b6:	0020      	movs	r0, r4
     1b8:	4b1f      	ldr	r3, [pc, #124]	; (238 <config_timer_waveform+0x8c>)
     1ba:	4798      	blx	r3
	struct port_config config_port_pin;
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	
	//
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
     1bc:	2306      	movs	r3, #6
     1be:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period		   = 0x00FF;
     1c0:	33f9      	adds	r3, #249	; 0xf9
     1c2:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     1c4:	3bfd      	subs	r3, #253	; 0xfd
     1c6:	7623      	strb	r3, [r4, #24]
	
	
	//Wave Polarity 
	config_tcc.compare.wave_polarity[LEFT_MOTOR_CLOCK_CH]		= TCC_WAVE_POLARITY_0;
     1c8:	2300      	movs	r3, #0
     1ca:	75a3      	strb	r3, [r4, #22]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_CLOCK_CH]		= TCC_WAVE_POLARITY_0;
     1cc:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[LEFT_MOTOR_ANTI_CH]		= TCC_WAVE_POLARITY_0;
     1ce:	75e3      	strb	r3, [r4, #23]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_ANTI_CH]		= TCC_WAVE_POLARITY_0;
     1d0:	7563      	strb	r3, [r4, #21]
	
	//Right Motor 
	config_tcc.compare.match[RIGHT_MOTOR_CLOCK_CH]			= 0x00;
     1d2:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_CLOCK_WO] = true;
     1d4:	2201      	movs	r2, #1
     1d6:	2198      	movs	r1, #152	; 0x98
     1d8:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[RIGHT_MOTOR_CLOCK_WO]        = PIN_PA04F_TCC0_WO0; // this is no longer correct --- should be now
     1da:	3994      	subs	r1, #148	; 0x94
     1dc:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_CLOCK_WO]    = PINMUX_PA04F_TCC0_WO0; // this is no longer correct --- should be now
     1de:	4917      	ldr	r1, [pc, #92]	; (23c <config_timer_waveform+0x90>)
     1e0:	67a1      	str	r1, [r4, #120]	; 0x78
	
	config_tcc.compare.match[RIGHT_MOTOR_ANTI_CH]			= 0x00;
     1e2:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_ANTI_WO] = true;
     1e4:	2199      	movs	r1, #153	; 0x99
     1e6:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[RIGHT_MOTOR_ANTI_WO]        = PIN_PA05F_TCC0_WO1; // this is no longer correct --- should be now
     1e8:	3994      	subs	r1, #148	; 0x94
     1ea:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_ANTI_WO]    = PINMUX_PA05F_TCC0_WO1; // this is no longer correct --- should be now
     1ec:	4914      	ldr	r1, [pc, #80]	; (240 <config_timer_waveform+0x94>)
     1ee:	67e1      	str	r1, [r4, #124]	; 0x7c
	
	//
	config_tcc.compare.match[LEFT_MOTOR_CLOCK_CH]				= 0x00;
     1f0:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_CLOCK_WO]  = true;
     1f2:	219a      	movs	r1, #154	; 0x9a
     1f4:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_CLOCK_WO]         = PIN_PA10F_TCC0_WO2; //this is no longer correct--- should be now
     1f6:	3990      	subs	r1, #144	; 0x90
     1f8:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_CLOCK_WO]     = PINMUX_PA10F_TCC0_WO2; // this is no longer correct --- should be now
     1fa:	4812      	ldr	r0, [pc, #72]	; (244 <config_timer_waveform+0x98>)
     1fc:	3176      	adds	r1, #118	; 0x76
     1fe:	5060      	str	r0, [r4, r1]
	
	config_tcc.compare.match[LEFT_MOTOR_ANTI_CH]				= 0x00;
     200:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_ANTI_WO]  = true;
     202:	339b      	adds	r3, #155	; 0x9b
     204:	54e2      	strb	r2, [r4, r3]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_ANTI_WO]         = PIN_PA11F_TCC0_WO3; //this is no longer correct--- should be now
     206:	3b90      	subs	r3, #144	; 0x90
     208:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_ANTI_WO]     = PINMUX_PA11F_TCC0_WO3; // this is no longer correct --- should be now
     20a:	4a0f      	ldr	r2, [pc, #60]	; (248 <config_timer_waveform+0x9c>)
     20c:	3379      	adds	r3, #121	; 0x79
     20e:	50e2      	str	r2, [r4, r3]
    
	
	tcc_init(&tcc_instance0, TCC0, &config_tcc);
     210:	4e0e      	ldr	r6, [pc, #56]	; (24c <config_timer_waveform+0xa0>)
     212:	0022      	movs	r2, r4
     214:	0029      	movs	r1, r5
     216:	0030      	movs	r0, r6
     218:	4b0d      	ldr	r3, [pc, #52]	; (250 <config_timer_waveform+0xa4>)
     21a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     21c:	6832      	ldr	r2, [r6, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     21e:	2102      	movs	r1, #2
     220:	6893      	ldr	r3, [r2, #8]
     222:	4219      	tst	r1, r3
     224:	d1fc      	bne.n	220 <config_timer_waveform+0x74>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     226:	6813      	ldr	r3, [r2, #0]
     228:	2102      	movs	r1, #2
     22a:	430b      	orrs	r3, r1
     22c:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance0);
	
}
     22e:	b02a      	add	sp, #168	; 0xa8
     230:	bd70      	pop	{r4, r5, r6, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	42001400 	.word	0x42001400
     238:	000006f9 	.word	0x000006f9
     23c:	00040005 	.word	0x00040005
     240:	00050005 	.word	0x00050005
     244:	000a0005 	.word	0x000a0005
     248:	000b0005 	.word	0x000b0005
     24c:	20000030 	.word	0x20000030
     250:	00000835 	.word	0x00000835

00000254 <set_motor_left>:

void set_motor_left(uint8_t dir, uint8_t speed)
{
     254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     256:	0004      	movs	r4, r0
     258:	000d      	movs	r5, r1
	static uint8_t old_left_dir   = 0;
	static uint8_t old_left_speed = 0; 
	if((old_left_dir != dir)||(old_left_speed != speed))
     25a:	4b12      	ldr	r3, [pc, #72]	; (2a4 <set_motor_left+0x50>)
     25c:	781b      	ldrb	r3, [r3, #0]
     25e:	4283      	cmp	r3, r0
     260:	d010      	beq.n	284 <set_motor_left+0x30>
	{
		// need to configure PWM with opposite pins
		if(dir == 0)
     262:	2c00      	cmp	r4, #0
     264:	d013      	beq.n	28e <set_motor_left+0x3a>
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, speed);
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, 0x00);
		}
		else
		{
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, 0x00);
     266:	4f10      	ldr	r7, [pc, #64]	; (2a8 <set_motor_left+0x54>)
     268:	2200      	movs	r2, #0
     26a:	2102      	movs	r1, #2
     26c:	0038      	movs	r0, r7
     26e:	4e0f      	ldr	r6, [pc, #60]	; (2ac <set_motor_left+0x58>)
     270:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, speed);
     272:	002a      	movs	r2, r5
     274:	2103      	movs	r1, #3
     276:	0038      	movs	r0, r7
     278:	47b0      	blx	r6
		}
		
	}
	old_left_speed	= speed; 
     27a:	4b0d      	ldr	r3, [pc, #52]	; (2b0 <set_motor_left+0x5c>)
     27c:	701d      	strb	r5, [r3, #0]
	old_left_dir	= dir;
     27e:	4b09      	ldr	r3, [pc, #36]	; (2a4 <set_motor_left+0x50>)
     280:	701c      	strb	r4, [r3, #0]
}
     282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((old_left_dir != dir)||(old_left_speed != speed))
     284:	4b0a      	ldr	r3, [pc, #40]	; (2b0 <set_motor_left+0x5c>)
     286:	781b      	ldrb	r3, [r3, #0]
     288:	428b      	cmp	r3, r1
     28a:	d1ea      	bne.n	262 <set_motor_left+0xe>
     28c:	e7f5      	b.n	27a <set_motor_left+0x26>
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CLOCK_CH, speed);
     28e:	4f06      	ldr	r7, [pc, #24]	; (2a8 <set_motor_left+0x54>)
     290:	002a      	movs	r2, r5
     292:	2102      	movs	r1, #2
     294:	0038      	movs	r0, r7
     296:	4e05      	ldr	r6, [pc, #20]	; (2ac <set_motor_left+0x58>)
     298:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_ANTI_CH, 0x00);
     29a:	2200      	movs	r2, #0
     29c:	2103      	movs	r1, #3
     29e:	0038      	movs	r0, r7
     2a0:	47b0      	blx	r6
     2a2:	e7ea      	b.n	27a <set_motor_left+0x26>
     2a4:	2000002c 	.word	0x2000002c
     2a8:	20000030 	.word	0x20000030
     2ac:	00000bbd 	.word	0x00000bbd
     2b0:	2000002d 	.word	0x2000002d

000002b4 <set_motor_right>:


void set_motor_right(uint8_t dir, uint8_t speed)
{
     2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2b6:	0004      	movs	r4, r0
     2b8:	000d      	movs	r5, r1
	static uint8_t old_right_dir = 0;
	static uint8_t old_right_speed = 0;
	if((old_right_dir != dir ) || (old_right_speed != speed))
     2ba:	4b12      	ldr	r3, [pc, #72]	; (304 <set_motor_right+0x50>)
     2bc:	781b      	ldrb	r3, [r3, #0]
     2be:	4283      	cmp	r3, r0
     2c0:	d010      	beq.n	2e4 <set_motor_right+0x30>
	{
		// need to configure PWM with opposite pins
		if(dir == 0)
     2c2:	2c00      	cmp	r4, #0
     2c4:	d013      	beq.n	2ee <set_motor_right+0x3a>
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, speed);
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, 0x00);
		}
		else
		{
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, 0x00);
     2c6:	4f10      	ldr	r7, [pc, #64]	; (308 <set_motor_right+0x54>)
     2c8:	2200      	movs	r2, #0
     2ca:	2100      	movs	r1, #0
     2cc:	0038      	movs	r0, r7
     2ce:	4e0f      	ldr	r6, [pc, #60]	; (30c <set_motor_right+0x58>)
     2d0:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, speed);
     2d2:	002a      	movs	r2, r5
     2d4:	2101      	movs	r1, #1
     2d6:	0038      	movs	r0, r7
     2d8:	47b0      	blx	r6
		}
	}
	old_right_speed     = speed;
     2da:	4b0d      	ldr	r3, [pc, #52]	; (310 <set_motor_right+0x5c>)
     2dc:	701d      	strb	r5, [r3, #0]
	old_right_dir		= dir;
     2de:	4b09      	ldr	r3, [pc, #36]	; (304 <set_motor_right+0x50>)
     2e0:	701c      	strb	r4, [r3, #0]
}
     2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((old_right_dir != dir ) || (old_right_speed != speed))
     2e4:	4b0a      	ldr	r3, [pc, #40]	; (310 <set_motor_right+0x5c>)
     2e6:	781b      	ldrb	r3, [r3, #0]
     2e8:	428b      	cmp	r3, r1
     2ea:	d1ea      	bne.n	2c2 <set_motor_right+0xe>
     2ec:	e7f5      	b.n	2da <set_motor_right+0x26>
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CLOCK_CH, speed);
     2ee:	4f06      	ldr	r7, [pc, #24]	; (308 <set_motor_right+0x54>)
     2f0:	002a      	movs	r2, r5
     2f2:	2100      	movs	r1, #0
     2f4:	0038      	movs	r0, r7
     2f6:	4e05      	ldr	r6, [pc, #20]	; (30c <set_motor_right+0x58>)
     2f8:	47b0      	blx	r6
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_ANTI_CH, 0x00);
     2fa:	2200      	movs	r2, #0
     2fc:	2101      	movs	r1, #1
     2fe:	0038      	movs	r0, r7
     300:	47b0      	blx	r6
     302:	e7ea      	b.n	2da <set_motor_right+0x26>
     304:	2000002e 	.word	0x2000002e
     308:	20000030 	.word	0x20000030
     30c:	00000bbd 	.word	0x00000bbd
     310:	2000002f 	.word	0x2000002f

00000314 <configure_motors>:
	port_pin_set_output_level(RIGHT_MOTOR_ANTI_PIN, false);
	
}

void configure_motors()
{
     314:	b510      	push	{r4, lr}
	//config_pins();
	config_timer_waveform();
     316:	4b01      	ldr	r3, [pc, #4]	; (31c <configure_motors+0x8>)
     318:	4798      	blx	r3
     31a:	bd10      	pop	{r4, pc}
     31c:	000001ad 	.word	0x000001ad

00000320 <init_power_pin>:
#include "power_on_off.h"



void init_power_pin()
{
     320:	b5f0      	push	{r4, r5, r6, r7, lr}
     322:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     324:	ac01      	add	r4, sp, #4
     326:	2701      	movs	r7, #1
     328:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
     32a:	2600      	movs	r6, #0
     32c:	70a6      	strb	r6, [r4, #2]
	struct port_config power_button_config;
	port_get_config_defaults(&power_button_config);
	power_button_config.direction  = PORT_PIN_DIR_OUTPUT;
     32e:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(POWER_ON_PIN,&power_button_config);
     330:	0021      	movs	r1, r4
     332:	2009      	movs	r0, #9
     334:	4d06      	ldr	r5, [pc, #24]	; (350 <init_power_pin+0x30>)
     336:	47a8      	blx	r5
	power_button_config.direction  = PORT_PIN_DIR_OUTPUT;
     338:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RGB_R_PIN,&power_button_config);
     33a:	0021      	movs	r1, r4
     33c:	201b      	movs	r0, #27
     33e:	47a8      	blx	r5
	
	power_button_config.direction  = PORT_PIN_DIR_INPUT;
     340:	7026      	strb	r6, [r4, #0]
	power_button_config.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     342:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(POWER_OFF_PIN,&power_button_config);
     344:	0021      	movs	r1, r4
     346:	200e      	movs	r0, #14
     348:	47a8      	blx	r5
}
     34a:	b003      	add	sp, #12
     34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00001295 	.word	0x00001295

00000354 <power_button_on>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     354:	4b03      	ldr	r3, [pc, #12]	; (364 <power_button_on+0x10>)
     356:	2280      	movs	r2, #128	; 0x80
     358:	0092      	lsls	r2, r2, #2
     35a:	619a      	str	r2, [r3, #24]
     35c:	2280      	movs	r2, #128	; 0x80
     35e:	0512      	lsls	r2, r2, #20
     360:	619a      	str	r2, [r3, #24]

void power_button_on()
{
	port_pin_set_output_level(POWER_ON_PIN, true);
	port_pin_set_output_level(RGB_R_PIN, true);
}
     362:	4770      	bx	lr
     364:	41004400 	.word	0x41004400

00000368 <power_button_init>:
	}
}


void power_button_init()
{
     368:	b510      	push	{r4, lr}
	init_power_pin();
     36a:	4b02      	ldr	r3, [pc, #8]	; (374 <power_button_init+0xc>)
     36c:	4798      	blx	r3
	power_button_on();
     36e:	4b02      	ldr	r3, [pc, #8]	; (378 <power_button_init+0x10>)
     370:	4798      	blx	r3
     372:	bd10      	pop	{r4, pc}
     374:	00000321 	.word	0x00000321
     378:	00000355 	.word	0x00000355

0000037c <tc_callback_OF>:

void tc_callback_OF(struct tc_module *const module_inst)
{
	
	
}
     37c:	4770      	bx	lr

0000037e <tc_callback_PWM>:

void tc_callback_PWM(struct tc_module *const module_inst)
{
	
}
     37e:	4770      	bx	lr

00000380 <increasing_sort_tag>:
{
     380:	b570      	push	{r4, r5, r6, lr}
     382:	b082      	sub	sp, #8
     384:	2300      	movs	r3, #0
		temp_temp_pin_array[i] = temp_pin_array_2[i] ;
     386:	4c27      	ldr	r4, [pc, #156]	; (424 <STACK_SIZE+0x24>)
     388:	a801      	add	r0, sp, #4
		temp_temp_compare_array[i] = temp_compare_array_2[i] ;
     38a:	4927      	ldr	r1, [pc, #156]	; (428 <STACK_SIZE+0x28>)
		temp_temp_pin_array[i] = temp_pin_array_2[i] ;
     38c:	5ce2      	ldrb	r2, [r4, r3]
     38e:	54c2      	strb	r2, [r0, r3]
		temp_temp_compare_array[i] = temp_compare_array_2[i] ;
     390:	5cca      	ldrb	r2, [r1, r3]
     392:	466d      	mov	r5, sp
     394:	54ea      	strb	r2, [r5, r3]
     396:	3301      	adds	r3, #1
	for(i=0;i<TOTAL_LEDS;i++)
     398:	2b03      	cmp	r3, #3
     39a:	d1f7      	bne.n	38c <increasing_sort_tag+0xc>
     39c:	2200      	movs	r2, #0
     39e:	2300      	movs	r3, #0
				temp = temp_temp_pin_array[j];
     3a0:	ad01      	add	r5, sp, #4
     3a2:	e004      	b.n	3ae <increasing_sort_tag+0x2e>
		for(j=0;j< N-i-1;j++)
     3a4:	3301      	adds	r3, #1
     3a6:	b2db      	uxtb	r3, r3
     3a8:	001a      	movs	r2, r3
     3aa:	2b01      	cmp	r3, #1
     3ac:	dc0e      	bgt.n	3cc <increasing_sort_tag+0x4c>
			if(temp_temp_compare_array[j]>temp_temp_compare_array[j+1])
     3ae:	4669      	mov	r1, sp
     3b0:	5c88      	ldrb	r0, [r1, r2]
     3b2:	1c51      	adds	r1, r2, #1
     3b4:	466c      	mov	r4, sp
     3b6:	5c64      	ldrb	r4, [r4, r1]
     3b8:	42a0      	cmp	r0, r4
     3ba:	d9f3      	bls.n	3a4 <increasing_sort_tag+0x24>
				temp_temp_compare_array[j] = temp_temp_compare_array[j+1];
     3bc:	466e      	mov	r6, sp
     3be:	54b4      	strb	r4, [r6, r2]
				temp_temp_compare_array[j+1]= temp;
     3c0:	5470      	strb	r0, [r6, r1]
				temp = temp_temp_pin_array[j];
     3c2:	5ca8      	ldrb	r0, [r5, r2]
				temp_temp_pin_array[j]   = temp_temp_pin_array[j+1];
     3c4:	5c6c      	ldrb	r4, [r5, r1]
     3c6:	54ac      	strb	r4, [r5, r2]
				temp_temp_pin_array[j+1] = temp;
     3c8:	5468      	strb	r0, [r5, r1]
     3ca:	e7eb      	b.n	3a4 <increasing_sort_tag+0x24>
		for(j=0;j< N-i-1;j++)
     3cc:	2200      	movs	r2, #0
     3ce:	2300      	movs	r3, #0
				temp = temp_temp_pin_array[j];
     3d0:	ad01      	add	r5, sp, #4
     3d2:	e003      	b.n	3dc <increasing_sort_tag+0x5c>
		for(j=0;j< N-i-1;j++)
     3d4:	3301      	adds	r3, #1
     3d6:	b2db      	uxtb	r3, r3
     3d8:	1e1a      	subs	r2, r3, #0
     3da:	dc0e      	bgt.n	3fa <increasing_sort_tag+0x7a>
			if(temp_temp_compare_array[j]>temp_temp_compare_array[j+1])
     3dc:	4669      	mov	r1, sp
     3de:	5c88      	ldrb	r0, [r1, r2]
     3e0:	1c51      	adds	r1, r2, #1
     3e2:	466c      	mov	r4, sp
     3e4:	5c64      	ldrb	r4, [r4, r1]
     3e6:	42a0      	cmp	r0, r4
     3e8:	d9f4      	bls.n	3d4 <increasing_sort_tag+0x54>
				temp_temp_compare_array[j] = temp_temp_compare_array[j+1];
     3ea:	466e      	mov	r6, sp
     3ec:	54b4      	strb	r4, [r6, r2]
				temp_temp_compare_array[j+1]= temp;
     3ee:	5470      	strb	r0, [r6, r1]
				temp = temp_temp_pin_array[j];
     3f0:	5ca8      	ldrb	r0, [r5, r2]
				temp_temp_pin_array[j]   = temp_temp_pin_array[j+1];
     3f2:	5c6c      	ldrb	r4, [r5, r1]
     3f4:	54ac      	strb	r4, [r5, r2]
				temp_temp_pin_array[j+1] = temp;
     3f6:	5468      	strb	r0, [r5, r1]
     3f8:	e7ec      	b.n	3d4 <increasing_sort_tag+0x54>
	lock_temp_array = true;
     3fa:	2201      	movs	r2, #1
     3fc:	4b0b      	ldr	r3, [pc, #44]	; (42c <STACK_SIZE+0x2c>)
     3fe:	701a      	strb	r2, [r3, #0]
     400:	2300      	movs	r3, #0
		temp_pin_array[i]     = temp_temp_pin_array[i]  ;
     402:	ac01      	add	r4, sp, #4
     404:	480a      	ldr	r0, [pc, #40]	; (430 <STACK_SIZE+0x30>)
		temp_compare_array[i] = temp_temp_compare_array[i];
     406:	490b      	ldr	r1, [pc, #44]	; (434 <STACK_SIZE+0x34>)
		temp_pin_array[i]     = temp_temp_pin_array[i]  ;
     408:	5d1a      	ldrb	r2, [r3, r4]
     40a:	54c2      	strb	r2, [r0, r3]
		temp_compare_array[i] = temp_temp_compare_array[i];
     40c:	466a      	mov	r2, sp
     40e:	5c9a      	ldrb	r2, [r3, r2]
     410:	54ca      	strb	r2, [r1, r3]
     412:	3301      	adds	r3, #1
	for(i=0;i<N;i++)
     414:	2b03      	cmp	r3, #3
     416:	d1f7      	bne.n	408 <STACK_SIZE+0x8>
	lock_temp_array = false;
     418:	2200      	movs	r2, #0
     41a:	4b04      	ldr	r3, [pc, #16]	; (42c <STACK_SIZE+0x2c>)
     41c:	701a      	strb	r2, [r3, #0]
}
     41e:	b002      	add	sp, #8
     420:	bd70      	pop	{r4, r5, r6, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	20000120 	.word	0x20000120
     428:	20000128 	.word	0x20000128
     42c:	200000a8 	.word	0x200000a8
     430:	20000124 	.word	0x20000124
     434:	2000011c 	.word	0x2000011c

00000438 <ORB_timer_init>:
{
     438:	b510      	push	{r4, lr}
     43a:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     43c:	aa01      	add	r2, sp, #4
     43e:	2300      	movs	r3, #0
     440:	2100      	movs	r1, #0
     442:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     444:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     446:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     448:	2000      	movs	r0, #0
     44a:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     44c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     44e:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     450:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     452:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     454:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     456:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     458:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     45a:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     45c:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     45e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     460:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     462:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     464:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     466:	8593      	strh	r3, [r2, #44]	; 0x2c
	orb_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
     468:	23c0      	movs	r3, #192	; 0xc0
     46a:	00db      	lsls	r3, r3, #3
     46c:	8093      	strh	r3, [r2, #4]
	orb_tc_config.counter_size = TC_COUNTER_SIZE_8BIT;
     46e:	2304      	movs	r3, #4
     470:	7093      	strb	r3, [r2, #2]
	orb_tc_config.counter_8_bit.period = 0XFF;
     472:	21ff      	movs	r1, #255	; 0xff
     474:	3325      	adds	r3, #37	; 0x25
     476:	54d1      	strb	r1, [r2, r3]
	tc_init(&orb_tc_instance, TC1, &orb_tc_config);
     478:	4c07      	ldr	r4, [pc, #28]	; (498 <ORB_timer_init+0x60>)
     47a:	4908      	ldr	r1, [pc, #32]	; (49c <ORB_timer_init+0x64>)
     47c:	0020      	movs	r0, r4
     47e:	4b08      	ldr	r3, [pc, #32]	; (4a0 <ORB_timer_init+0x68>)
     480:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     482:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     484:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     486:	b25b      	sxtb	r3, r3
     488:	2b00      	cmp	r3, #0
     48a:	dbfb      	blt.n	484 <ORB_timer_init+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     48c:	8813      	ldrh	r3, [r2, #0]
     48e:	2102      	movs	r1, #2
     490:	430b      	orrs	r3, r1
     492:	8013      	strh	r3, [r2, #0]
}
     494:	b00e      	add	sp, #56	; 0x38
     496:	bd10      	pop	{r4, pc}
     498:	200000b0 	.word	0x200000b0
     49c:	42001800 	.word	0x42001800
     4a0:	00000c4d 	.word	0x00000c4d

000004a4 <set_drivestrength_ORB>:
{
     4a4:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_ORB,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
     4a6:	2201      	movs	r2, #1
     4a8:	21c8      	movs	r1, #200	; 0xc8
     4aa:	0609      	lsls	r1, r1, #24
     4ac:	4801      	ldr	r0, [pc, #4]	; (4b4 <set_drivestrength_ORB+0x10>)
     4ae:	4b02      	ldr	r3, [pc, #8]	; (4b8 <set_drivestrength_ORB+0x14>)
     4b0:	4798      	blx	r3
}
     4b2:	bd10      	pop	{r4, pc}
     4b4:	41004400 	.word	0x41004400
     4b8:	00001899 	.word	0x00001899

000004bc <ORB_setup_pins>:
{
     4bc:	b530      	push	{r4, r5, lr}
     4be:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     4c0:	ac01      	add	r4, sp, #4
     4c2:	2301      	movs	r3, #1
     4c4:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     4c6:	2200      	movs	r2, #0
     4c8:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     4ca:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(RGB_R_PIN, &config_port_pin);
     4cc:	0021      	movs	r1, r4
     4ce:	201b      	movs	r0, #27
     4d0:	4d07      	ldr	r5, [pc, #28]	; (4f0 <ORB_setup_pins+0x34>)
     4d2:	47a8      	blx	r5
	port_pin_set_config(RGB_G_PIN, &config_port_pin);
     4d4:	0021      	movs	r1, r4
     4d6:	201f      	movs	r0, #31
     4d8:	47a8      	blx	r5
	port_pin_set_config(RGB_B_PIN, &config_port_pin);
     4da:	0021      	movs	r1, r4
     4dc:	201e      	movs	r0, #30
     4de:	47a8      	blx	r5
	set_drivestrength_ORB();
     4e0:	4b04      	ldr	r3, [pc, #16]	; (4f4 <ORB_setup_pins+0x38>)
     4e2:	4798      	blx	r3
	port_base->OUTSET.reg = CLEAR_ORB ;
     4e4:	22c8      	movs	r2, #200	; 0xc8
     4e6:	0612      	lsls	r2, r2, #24
     4e8:	4b03      	ldr	r3, [pc, #12]	; (4f8 <ORB_setup_pins+0x3c>)
     4ea:	619a      	str	r2, [r3, #24]
}
     4ec:	b003      	add	sp, #12
     4ee:	bd30      	pop	{r4, r5, pc}
     4f0:	00001295 	.word	0x00001295
     4f4:	000004a5 	.word	0x000004a5
     4f8:	41004400 	.word	0x41004400

000004fc <ORB_timer_callbacks_init>:

void ORB_timer_callbacks_init()
{
     4fc:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&orb_tc_instance, tc_callback_OF,TC_CALLBACK_OVERFLOW);
     4fe:	4d05      	ldr	r5, [pc, #20]	; (514 <ORB_timer_callbacks_init+0x18>)
     500:	2200      	movs	r2, #0
     502:	4905      	ldr	r1, [pc, #20]	; (518 <ORB_timer_callbacks_init+0x1c>)
     504:	0028      	movs	r0, r5
     506:	4c05      	ldr	r4, [pc, #20]	; (51c <ORB_timer_callbacks_init+0x20>)
     508:	47a0      	blx	r4
	tc_register_callback(&orb_tc_instance, tc_callback_PWM,TC_CALLBACK_CC_CHANNEL0);
     50a:	2202      	movs	r2, #2
     50c:	4904      	ldr	r1, [pc, #16]	; (520 <ORB_timer_callbacks_init+0x24>)
     50e:	0028      	movs	r0, r5
     510:	47a0      	blx	r4
}
     512:	bd70      	pop	{r4, r5, r6, pc}
     514:	200000b0 	.word	0x200000b0
     518:	0000037d 	.word	0x0000037d
     51c:	00000e7d 	.word	0x00000e7d
     520:	0000037f 	.word	0x0000037f

00000524 <enable_ORB>:

void enable_ORB()
{
     524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     526:	46ce      	mov	lr, r9
     528:	4647      	mov	r7, r8
     52a:	b580      	push	{r7, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     52c:	4c13      	ldr	r4, [pc, #76]	; (57c <enable_ORB+0x58>)
     52e:	6820      	ldr	r0, [r4, #0]
     530:	4b13      	ldr	r3, [pc, #76]	; (580 <enable_ORB+0x5c>)
     532:	4699      	mov	r9, r3
     534:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     536:	4b13      	ldr	r3, [pc, #76]	; (584 <enable_ORB+0x60>)
     538:	4698      	mov	r8, r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     53a:	5c1b      	ldrb	r3, [r3, r0]
     53c:	261f      	movs	r6, #31
     53e:	4033      	ands	r3, r6
     540:	2501      	movs	r5, #1
     542:	002a      	movs	r2, r5
     544:	409a      	lsls	r2, r3
     546:	4f10      	ldr	r7, [pc, #64]	; (588 <enable_ORB+0x64>)
     548:	603a      	str	r2, [r7, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     54a:	7e63      	ldrb	r3, [r4, #25]
     54c:	2201      	movs	r2, #1
     54e:	4313      	orrs	r3, r2
     550:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     552:	6823      	ldr	r3, [r4, #0]
     554:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     556:	0018      	movs	r0, r3
     558:	47c8      	blx	r9
     55a:	4643      	mov	r3, r8
     55c:	5c1b      	ldrb	r3, [r3, r0]
     55e:	401e      	ands	r6, r3
     560:	40b5      	lsls	r5, r6
     562:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
     564:	7e63      	ldrb	r3, [r4, #25]
     566:	2210      	movs	r2, #16
     568:	4313      	orrs	r3, r2
     56a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
     56c:	6823      	ldr	r3, [r4, #0]
     56e:	2210      	movs	r2, #16
     570:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
     572:	bc0c      	pop	{r2, r3}
     574:	4690      	mov	r8, r2
     576:	4699      	mov	r9, r3
     578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	200000b0 	.word	0x200000b0
     580:	00000c29 	.word	0x00000c29
     584:	00001b7c 	.word	0x00001b7c
     588:	e000e100 	.word	0xe000e100

0000058c <initializing_pin_array>:
	tc_disable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void initializing_pin_array()
{
	temp_pin_array_2[0]  = RGB_R_PIN;
     58c:	4b03      	ldr	r3, [pc, #12]	; (59c <initializing_pin_array+0x10>)
     58e:	221b      	movs	r2, #27
     590:	701a      	strb	r2, [r3, #0]
	temp_pin_array_2[1]  = RGB_G_PIN;
     592:	3204      	adds	r2, #4
     594:	705a      	strb	r2, [r3, #1]
	temp_pin_array_2[2]  = RGB_B_PIN;
     596:	3a01      	subs	r2, #1
     598:	709a      	strb	r2, [r3, #2]
}
     59a:	4770      	bx	lr
     59c:	20000120 	.word	0x20000120

000005a0 <initializing_compare_array>:

void initializing_compare_array()
{
	temp_compare_array_2[0] = 255;//Left -- R
     5a0:	4b02      	ldr	r3, [pc, #8]	; (5ac <initializing_compare_array+0xc>)
     5a2:	22ff      	movs	r2, #255	; 0xff
     5a4:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
     5a6:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
     5a8:	709a      	strb	r2, [r3, #2]
}
     5aa:	4770      	bx	lr
     5ac:	20000128 	.word	0x20000128

000005b0 <ORB_init_array>:


void ORB_init_array()
{
     5b0:	b510      	push	{r4, lr}
	initializing_pin_array();
     5b2:	4b03      	ldr	r3, [pc, #12]	; (5c0 <ORB_init_array+0x10>)
     5b4:	4798      	blx	r3
	initializing_compare_array();
     5b6:	4b03      	ldr	r3, [pc, #12]	; (5c4 <ORB_init_array+0x14>)
     5b8:	4798      	blx	r3
	increasing_sort_tag();
     5ba:	4b03      	ldr	r3, [pc, #12]	; (5c8 <ORB_init_array+0x18>)
     5bc:	4798      	blx	r3
}
     5be:	bd10      	pop	{r4, pc}
     5c0:	0000058d 	.word	0x0000058d
     5c4:	000005a1 	.word	0x000005a1
     5c8:	00000381 	.word	0x00000381

000005cc <ORB_init>:

void ORB_init()
{
     5cc:	b510      	push	{r4, lr}
	//Timer Initialization
	ORB_timer_init();
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <ORB_init+0x14>)
     5d0:	4798      	blx	r3
	ORB_setup_pins();
     5d2:	4b04      	ldr	r3, [pc, #16]	; (5e4 <ORB_init+0x18>)
     5d4:	4798      	blx	r3
	ORB_init_array();
     5d6:	4b04      	ldr	r3, [pc, #16]	; (5e8 <ORB_init+0x1c>)
     5d8:	4798      	blx	r3
	//Initialize the timer callbacks
	ORB_timer_callbacks_init();
     5da:	4b04      	ldr	r3, [pc, #16]	; (5ec <ORB_init+0x20>)
     5dc:	4798      	blx	r3
     5de:	bd10      	pop	{r4, pc}
     5e0:	00000439 	.word	0x00000439
     5e4:	000004bd 	.word	0x000004bd
     5e8:	000005b1 	.word	0x000005b1
     5ec:	000004fd 	.word	0x000004fd

000005f0 <test_motors>:
		delay_cycles_ms(20);
	}
}

void test_motors()
{
     5f0:	b510      	push	{r4, lr}
	//Left Forward
	set_motor_left(0,150);
     5f2:	2196      	movs	r1, #150	; 0x96
     5f4:	2000      	movs	r0, #0
     5f6:	4b05      	ldr	r3, [pc, #20]	; (60c <test_motors+0x1c>)
     5f8:	4798      	blx	r3
	set_motor_right(0,150);
     5fa:	2196      	movs	r1, #150	; 0x96
     5fc:	2000      	movs	r0, #0
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <test_motors+0x20>)
     600:	4798      	blx	r3
	delay_cycles_ms(2000);
     602:	20fa      	movs	r0, #250	; 0xfa
     604:	00c0      	lsls	r0, r0, #3
     606:	4b03      	ldr	r3, [pc, #12]	; (614 <test_motors+0x24>)
     608:	4798      	blx	r3
	delay_cycles_ms(500);
	set_motor_left(1,150);
	set_motor_right(1,150);
	delay_cycles_ms(2000);
	*/
     60a:	bd10      	pop	{r4, pc}
     60c:	00000255 	.word	0x00000255
     610:	000002b5 	.word	0x000002b5
     614:	00001269 	.word	0x00001269

00000618 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     618:	4a04      	ldr	r2, [pc, #16]	; (62c <_extint_enable+0x14>)
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	2102      	movs	r1, #2
     61e:	430b      	orrs	r3, r1
     620:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     622:	7853      	ldrb	r3, [r2, #1]
     624:	b25b      	sxtb	r3, r3
     626:	2b00      	cmp	r3, #0
     628:	dbfb      	blt.n	622 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     62a:	4770      	bx	lr
     62c:	40001800 	.word	0x40001800

00000630 <_system_extint_init>:
{
     630:	b500      	push	{lr}
     632:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     634:	4a12      	ldr	r2, [pc, #72]	; (680 <_system_extint_init+0x50>)
     636:	6993      	ldr	r3, [r2, #24]
     638:	2140      	movs	r1, #64	; 0x40
     63a:	430b      	orrs	r3, r1
     63c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     63e:	a901      	add	r1, sp, #4
     640:	2300      	movs	r3, #0
     642:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     644:	2005      	movs	r0, #5
     646:	4b0f      	ldr	r3, [pc, #60]	; (684 <_system_extint_init+0x54>)
     648:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     64a:	2005      	movs	r0, #5
     64c:	4b0e      	ldr	r3, [pc, #56]	; (688 <_system_extint_init+0x58>)
     64e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     650:	4a0e      	ldr	r2, [pc, #56]	; (68c <_system_extint_init+0x5c>)
     652:	7813      	ldrb	r3, [r2, #0]
     654:	2101      	movs	r1, #1
     656:	430b      	orrs	r3, r1
     658:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     65a:	7853      	ldrb	r3, [r2, #1]
     65c:	b25b      	sxtb	r3, r3
     65e:	2b00      	cmp	r3, #0
     660:	dbfb      	blt.n	65a <_system_extint_init+0x2a>
     662:	4b0b      	ldr	r3, [pc, #44]	; (690 <_system_extint_init+0x60>)
     664:	0019      	movs	r1, r3
     666:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     668:	2200      	movs	r2, #0
     66a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     66c:	4299      	cmp	r1, r3
     66e:	d1fc      	bne.n	66a <_system_extint_init+0x3a>
     670:	2210      	movs	r2, #16
     672:	4b08      	ldr	r3, [pc, #32]	; (694 <_system_extint_init+0x64>)
     674:	601a      	str	r2, [r3, #0]
	_extint_enable();
     676:	4b08      	ldr	r3, [pc, #32]	; (698 <_system_extint_init+0x68>)
     678:	4798      	blx	r3
}
     67a:	b003      	add	sp, #12
     67c:	bd00      	pop	{pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	40000400 	.word	0x40000400
     684:	00001771 	.word	0x00001771
     688:	000016e5 	.word	0x000016e5
     68c:	40001800 	.word	0x40001800
     690:	200000cc 	.word	0x200000cc
     694:	e000e100 	.word	0xe000e100
     698:	00000619 	.word	0x00000619

0000069c <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     69c:	2000      	movs	r0, #0
     69e:	4770      	bx	lr

000006a0 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     6a0:	b530      	push	{r4, r5, lr}
     6a2:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
     6a4:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
     6a6:	2903      	cmp	r1, #3
     6a8:	d900      	bls.n	6ac <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
     6aa:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
     6ac:	4d11      	ldr	r5, [pc, #68]	; (6f4 <_tcc_set_compare_value+0x54>)
     6ae:	42aa      	cmp	r2, r5
     6b0:	d8fb      	bhi.n	6aa <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
     6b2:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
     6b4:	2b00      	cmp	r3, #0
     6b6:	d010      	beq.n	6da <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
     6b8:	2480      	movs	r4, #128	; 0x80
     6ba:	0264      	lsls	r4, r4, #9
     6bc:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
     6be:	6b03      	ldr	r3, [r0, #48]	; 0x30
     6c0:	421c      	tst	r4, r3
     6c2:	d1fc      	bne.n	6be <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
     6c4:	2480      	movs	r4, #128	; 0x80
     6c6:	0324      	lsls	r4, r4, #12
     6c8:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
     6ca:	6883      	ldr	r3, [r0, #8]
     6cc:	421c      	tst	r4, r3
     6ce:	d1fc      	bne.n	6ca <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
     6d0:	311c      	adds	r1, #28
     6d2:	0089      	lsls	r1, r1, #2
     6d4:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
     6d6:	2000      	movs	r0, #0
     6d8:	e7e7      	b.n	6aa <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     6da:	2480      	movs	r4, #128	; 0x80
     6dc:	0064      	lsls	r4, r4, #1
     6de:	408c      	lsls	r4, r1
     6e0:	6883      	ldr	r3, [r0, #8]
     6e2:	421c      	tst	r4, r3
     6e4:	d1fc      	bne.n	6e0 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
     6e6:	3110      	adds	r1, #16
     6e8:	0089      	lsls	r1, r1, #2
     6ea:	1841      	adds	r1, r0, r1
     6ec:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
     6ee:	2000      	movs	r0, #0
     6f0:	e7db      	b.n	6aa <_tcc_set_compare_value+0xa>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	00ffffff 	.word	0x00ffffff

000006f8 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
     6f8:	2300      	movs	r3, #0
     6fa:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
     6fc:	4a4c      	ldr	r2, [pc, #304]	; (830 <tcc_get_config_defaults+0x138>)
     6fe:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
     700:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     702:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     704:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     706:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
     708:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     70a:	61c3      	str	r3, [r0, #28]
     70c:	6203      	str	r3, [r0, #32]
     70e:	6243      	str	r3, [r0, #36]	; 0x24
     710:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     712:	7503      	strb	r3, [r0, #20]
     714:	7543      	strb	r3, [r0, #21]
     716:	7583      	strb	r3, [r0, #22]
     718:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     71a:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     71c:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     71e:	7403      	strb	r3, [r0, #16]
     720:	7443      	strb	r3, [r0, #17]
     722:	7483      	strb	r3, [r0, #18]
     724:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     726:	222c      	movs	r2, #44	; 0x2c
     728:	5483      	strb	r3, [r0, r2]
     72a:	3201      	adds	r2, #1
     72c:	5483      	strb	r3, [r0, r2]
     72e:	3201      	adds	r2, #1
     730:	5483      	strb	r3, [r0, r2]
     732:	3201      	adds	r2, #1
     734:	5483      	strb	r3, [r0, r2]
     736:	3201      	adds	r2, #1
     738:	5483      	strb	r3, [r0, r2]
     73a:	3201      	adds	r2, #1
     73c:	5483      	strb	r3, [r0, r2]
     73e:	3201      	adds	r2, #1
     740:	5483      	strb	r3, [r0, r2]
     742:	3201      	adds	r2, #1
     744:	5483      	strb	r3, [r0, r2]
     746:	3201      	adds	r2, #1
     748:	5483      	strb	r3, [r0, r2]
     74a:	3201      	adds	r2, #1
     74c:	5483      	strb	r3, [r0, r2]
     74e:	3201      	adds	r2, #1
     750:	5483      	strb	r3, [r0, r2]
     752:	3201      	adds	r2, #1
     754:	5483      	strb	r3, [r0, r2]
     756:	3201      	adds	r2, #1
     758:	5483      	strb	r3, [r0, r2]
     75a:	3201      	adds	r2, #1
     75c:	5483      	strb	r3, [r0, r2]
     75e:	3201      	adds	r2, #1
     760:	5483      	strb	r3, [r0, r2]
     762:	3201      	adds	r2, #1
     764:	5483      	strb	r3, [r0, r2]
     766:	3201      	adds	r2, #1
     768:	5483      	strb	r3, [r0, r2]
     76a:	3201      	adds	r2, #1
     76c:	5483      	strb	r3, [r0, r2]
     76e:	3201      	adds	r2, #1
     770:	5483      	strb	r3, [r0, r2]
     772:	3201      	adds	r2, #1
     774:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     776:	3201      	adds	r2, #1
     778:	5483      	strb	r3, [r0, r2]
     77a:	3201      	adds	r2, #1
     77c:	5483      	strb	r3, [r0, r2]
     77e:	3201      	adds	r2, #1
     780:	5483      	strb	r3, [r0, r2]
     782:	3201      	adds	r2, #1
     784:	5483      	strb	r3, [r0, r2]
     786:	3201      	adds	r2, #1
     788:	5483      	strb	r3, [r0, r2]
     78a:	3201      	adds	r2, #1
     78c:	5483      	strb	r3, [r0, r2]
     78e:	3201      	adds	r2, #1
     790:	5483      	strb	r3, [r0, r2]
     792:	3201      	adds	r2, #1
     794:	5483      	strb	r3, [r0, r2]
     796:	3201      	adds	r2, #1
     798:	5483      	strb	r3, [r0, r2]
     79a:	3201      	adds	r2, #1
     79c:	5483      	strb	r3, [r0, r2]
     79e:	3201      	adds	r2, #1
     7a0:	5483      	strb	r3, [r0, r2]
     7a2:	3201      	adds	r2, #1
     7a4:	5483      	strb	r3, [r0, r2]
     7a6:	3201      	adds	r2, #1
     7a8:	5483      	strb	r3, [r0, r2]
     7aa:	3201      	adds	r2, #1
     7ac:	5483      	strb	r3, [r0, r2]
     7ae:	3201      	adds	r2, #1
     7b0:	5483      	strb	r3, [r0, r2]
     7b2:	3201      	adds	r2, #1
     7b4:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     7b6:	3201      	adds	r2, #1
     7b8:	5483      	strb	r3, [r0, r2]
     7ba:	3201      	adds	r2, #1
     7bc:	5483      	strb	r3, [r0, r2]
     7be:	3201      	adds	r2, #1
     7c0:	5483      	strb	r3, [r0, r2]
     7c2:	3201      	adds	r2, #1
     7c4:	5483      	strb	r3, [r0, r2]
     7c6:	3201      	adds	r2, #1
     7c8:	5483      	strb	r3, [r0, r2]
     7ca:	3201      	adds	r2, #1
     7cc:	5483      	strb	r3, [r0, r2]
     7ce:	3201      	adds	r2, #1
     7d0:	5483      	strb	r3, [r0, r2]
     7d2:	3201      	adds	r2, #1
     7d4:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     7d6:	3241      	adds	r2, #65	; 0x41
     7d8:	5483      	strb	r3, [r0, r2]
     7da:	6583      	str	r3, [r0, #88]	; 0x58
     7dc:	6783      	str	r3, [r0, #120]	; 0x78
     7de:	3201      	adds	r2, #1
     7e0:	5483      	strb	r3, [r0, r2]
     7e2:	65c3      	str	r3, [r0, #92]	; 0x5c
     7e4:	67c3      	str	r3, [r0, #124]	; 0x7c
     7e6:	3201      	adds	r2, #1
     7e8:	5483      	strb	r3, [r0, r2]
     7ea:	6603      	str	r3, [r0, #96]	; 0x60
     7ec:	3a1a      	subs	r2, #26
     7ee:	5083      	str	r3, [r0, r2]
     7f0:	321b      	adds	r2, #27
     7f2:	5483      	strb	r3, [r0, r2]
     7f4:	6643      	str	r3, [r0, #100]	; 0x64
     7f6:	3a17      	subs	r2, #23
     7f8:	5083      	str	r3, [r0, r2]
     7fa:	3218      	adds	r2, #24
     7fc:	5483      	strb	r3, [r0, r2]
     7fe:	6683      	str	r3, [r0, #104]	; 0x68
     800:	3a14      	subs	r2, #20
     802:	5083      	str	r3, [r0, r2]
     804:	3215      	adds	r2, #21
     806:	5483      	strb	r3, [r0, r2]
     808:	66c3      	str	r3, [r0, #108]	; 0x6c
     80a:	3a11      	subs	r2, #17
     80c:	5083      	str	r3, [r0, r2]
     80e:	3212      	adds	r2, #18
     810:	5483      	strb	r3, [r0, r2]
     812:	6703      	str	r3, [r0, #112]	; 0x70
     814:	3a0e      	subs	r2, #14
     816:	5083      	str	r3, [r0, r2]
     818:	320f      	adds	r2, #15
     81a:	5483      	strb	r3, [r0, r2]
     81c:	6743      	str	r3, [r0, #116]	; 0x74
     81e:	3a0b      	subs	r2, #11
     820:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
     822:	2101      	movs	r1, #1
     824:	320c      	adds	r2, #12
     826:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
     828:	3201      	adds	r2, #1
     82a:	5483      	strb	r3, [r0, r2]
}
     82c:	4770      	bx	lr
     82e:	46c0      	nop			; (mov r8, r8)
     830:	00ffffff 	.word	0x00ffffff

00000834 <tcc_init>:
{
     834:	b5f0      	push	{r4, r5, r6, r7, lr}
     836:	46de      	mov	lr, fp
     838:	4657      	mov	r7, sl
     83a:	464e      	mov	r6, r9
     83c:	4645      	mov	r5, r8
     83e:	b5e0      	push	{r5, r6, r7, lr}
     840:	b08d      	sub	sp, #52	; 0x34
     842:	0006      	movs	r6, r0
     844:	000c      	movs	r4, r1
     846:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     848:	0008      	movs	r0, r1
     84a:	4bcd      	ldr	r3, [pc, #820]	; (b80 <tcc_init+0x34c>)
     84c:	4798      	blx	r3
     84e:	0003      	movs	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     850:	49cc      	ldr	r1, [pc, #816]	; (b84 <tcc_init+0x350>)
     852:	6a0a      	ldr	r2, [r1, #32]
     854:	2020      	movs	r0, #32
     856:	4302      	orrs	r2, r0
     858:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     85a:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     85c:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     85e:	0792      	lsls	r2, r2, #30
     860:	d506      	bpl.n	870 <tcc_init+0x3c>
}
     862:	b00d      	add	sp, #52	; 0x34
     864:	bc3c      	pop	{r2, r3, r4, r5}
     866:	4690      	mov	r8, r2
     868:	4699      	mov	r9, r3
     86a:	46a2      	mov	sl, r4
     86c:	46ab      	mov	fp, r5
     86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     870:	6822      	ldr	r2, [r4, #0]
     872:	2701      	movs	r7, #1
     874:	4017      	ands	r7, r2
     876:	d1f4      	bne.n	862 <tcc_init+0x2e>
	if ((config->counter.count > count_max)
     878:	4ac3      	ldr	r2, [pc, #780]	; (b88 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
     87a:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
     87c:	6829      	ldr	r1, [r5, #0]
     87e:	4291      	cmp	r1, r2
     880:	d8ef      	bhi.n	862 <tcc_init+0x2e>
		|| (config->counter.period > count_max)
     882:	6869      	ldr	r1, [r5, #4]
     884:	4291      	cmp	r1, r2
     886:	d8ec      	bhi.n	862 <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
     888:	69e9      	ldr	r1, [r5, #28]
     88a:	4291      	cmp	r1, r2
     88c:	d900      	bls.n	890 <tcc_init+0x5c>
     88e:	e18b      	b.n	ba8 <tcc_init+0x374>
     890:	6a29      	ldr	r1, [r5, #32]
     892:	4291      	cmp	r1, r2
     894:	d900      	bls.n	898 <tcc_init+0x64>
     896:	e189      	b.n	bac <tcc_init+0x378>
     898:	6a69      	ldr	r1, [r5, #36]	; 0x24
     89a:	4291      	cmp	r1, r2
     89c:	d900      	bls.n	8a0 <tcc_init+0x6c>
     89e:	e187      	b.n	bb0 <tcc_init+0x37c>
     8a0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     8a2:	4291      	cmp	r1, r2
     8a4:	d900      	bls.n	8a8 <tcc_init+0x74>
     8a6:	e185      	b.n	bb4 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
     8a8:	7c2a      	ldrb	r2, [r5, #16]
     8aa:	3a01      	subs	r2, #1
     8ac:	4250      	negs	r0, r2
     8ae:	4150      	adcs	r0, r2
     8b0:	0602      	lsls	r2, r0, #24
     8b2:	9201      	str	r2, [sp, #4]
     8b4:	7c6a      	ldrb	r2, [r5, #17]
     8b6:	2a01      	cmp	r2, #1
     8b8:	d031      	beq.n	91e <tcc_init+0xea>
     8ba:	7caa      	ldrb	r2, [r5, #18]
     8bc:	2a01      	cmp	r2, #1
     8be:	d034      	beq.n	92a <tcc_init+0xf6>
     8c0:	7cea      	ldrb	r2, [r5, #19]
     8c2:	2a01      	cmp	r2, #1
     8c4:	d037      	beq.n	936 <tcc_init+0x102>
	if (config->run_in_standby) {
     8c6:	22a1      	movs	r2, #161	; 0xa1
     8c8:	5caa      	ldrb	r2, [r5, r2]
     8ca:	2a00      	cmp	r2, #0
     8cc:	d004      	beq.n	8d8 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     8ce:	2280      	movs	r2, #128	; 0x80
     8d0:	0112      	lsls	r2, r2, #4
     8d2:	9901      	ldr	r1, [sp, #4]
     8d4:	4311      	orrs	r1, r2
     8d6:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
     8d8:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     8da:	1e51      	subs	r1, r2, #1
     8dc:	418a      	sbcs	r2, r1
     8de:	0092      	lsls	r2, r2, #2
     8e0:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     8e2:	7a6a      	ldrb	r2, [r5, #9]
     8e4:	2a01      	cmp	r2, #1
     8e6:	d02c      	beq.n	942 <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
     8e8:	2235      	movs	r2, #53	; 0x35
     8ea:	5caa      	ldrb	r2, [r5, r2]
     8ec:	2a03      	cmp	r2, #3
     8ee:	d900      	bls.n	8f2 <tcc_init+0xbe>
     8f0:	e162      	b.n	bb8 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     8f2:	212c      	movs	r1, #44	; 0x2c
     8f4:	5c69      	ldrb	r1, [r5, r1]
     8f6:	290f      	cmp	r1, #15
     8f8:	d900      	bls.n	8fc <tcc_init+0xc8>
     8fa:	e15d      	b.n	bb8 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     8fc:	7b28      	ldrb	r0, [r5, #12]
     8fe:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     900:	7ae8      	ldrb	r0, [r5, #11]
     902:	9005      	str	r0, [sp, #20]
     904:	202d      	movs	r0, #45	; 0x2d
     906:	4682      	mov	sl, r0
     908:	44aa      	add	sl, r5
     90a:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     90c:	9702      	str	r7, [sp, #8]
     90e:	4684      	mov	ip, r0
     910:	9606      	str	r6, [sp, #24]
     912:	000e      	movs	r6, r1
     914:	46a0      	mov	r8, r4
     916:	4654      	mov	r4, sl
     918:	46a9      	mov	r9, r5
     91a:	9307      	str	r3, [sp, #28]
     91c:	e047      	b.n	9ae <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     91e:	2280      	movs	r2, #128	; 0x80
     920:	0492      	lsls	r2, r2, #18
     922:	9901      	ldr	r1, [sp, #4]
     924:	4311      	orrs	r1, r2
     926:	9101      	str	r1, [sp, #4]
     928:	e7c7      	b.n	8ba <tcc_init+0x86>
     92a:	2280      	movs	r2, #128	; 0x80
     92c:	04d2      	lsls	r2, r2, #19
     92e:	9901      	ldr	r1, [sp, #4]
     930:	4311      	orrs	r1, r2
     932:	9101      	str	r1, [sp, #4]
     934:	e7c4      	b.n	8c0 <tcc_init+0x8c>
     936:	2280      	movs	r2, #128	; 0x80
     938:	0512      	lsls	r2, r2, #20
     93a:	9901      	ldr	r1, [sp, #4]
     93c:	4311      	orrs	r1, r2
     93e:	9101      	str	r1, [sp, #4]
     940:	e7c1      	b.n	8c6 <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
     942:	9903      	ldr	r1, [sp, #12]
     944:	4311      	orrs	r1, r2
     946:	9103      	str	r1, [sp, #12]
     948:	e7ce      	b.n	8e8 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     94a:	0292      	lsls	r2, r2, #10
     94c:	25c0      	movs	r5, #192	; 0xc0
     94e:	012d      	lsls	r5, r5, #4
     950:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     952:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
     954:	790d      	ldrb	r5, [r1, #4]
     956:	2603      	movs	r6, #3
     958:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     95a:	4332      	orrs	r2, r6
     95c:	4655      	mov	r5, sl
     95e:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
     960:	794e      	ldrb	r6, [r1, #5]
     962:	0176      	lsls	r6, r6, #5
     964:	2560      	movs	r5, #96	; 0x60
     966:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     968:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
     96a:	798d      	ldrb	r5, [r1, #6]
     96c:	022d      	lsls	r5, r5, #8
     96e:	26c0      	movs	r6, #192	; 0xc0
     970:	00b6      	lsls	r6, r6, #2
     972:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     974:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     976:	79cd      	ldrb	r5, [r1, #7]
     978:	032d      	lsls	r5, r5, #12
     97a:	26e0      	movs	r6, #224	; 0xe0
     97c:	01f6      	lsls	r6, r6, #7
     97e:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     980:	432a      	orrs	r2, r5
     982:	4310      	orrs	r0, r2
     984:	4303      	orrs	r3, r0
     986:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
     988:	ab08      	add	r3, sp, #32
     98a:	4662      	mov	r2, ip
     98c:	2008      	movs	r0, #8
     98e:	181b      	adds	r3, r3, r0
     990:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     992:	2a04      	cmp	r2, #4
     994:	d028      	beq.n	9e8 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
     996:	7c8a      	ldrb	r2, [r1, #18]
     998:	2a03      	cmp	r2, #3
     99a:	d900      	bls.n	99e <tcc_init+0x16a>
     99c:	e10c      	b.n	bb8 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     99e:	7a4e      	ldrb	r6, [r1, #9]
     9a0:	340a      	adds	r4, #10
     9a2:	2304      	movs	r3, #4
     9a4:	469a      	mov	sl, r3
     9a6:	44d4      	add	ip, sl
     9a8:	2e0f      	cmp	r6, #15
     9aa:	d900      	bls.n	9ae <tcc_init+0x17a>
     9ac:	e104      	b.n	bb8 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     9ae:	0636      	lsls	r6, r6, #24
     9b0:	23f0      	movs	r3, #240	; 0xf0
     9b2:	051b      	lsls	r3, r3, #20
     9b4:	401e      	ands	r6, r3
     9b6:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     9b8:	7825      	ldrb	r5, [r4, #0]
     9ba:	042d      	lsls	r5, r5, #16
     9bc:	23ff      	movs	r3, #255	; 0xff
     9be:	041b      	lsls	r3, r3, #16
     9c0:	401d      	ands	r5, r3
     9c2:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     9c4:	7863      	ldrb	r3, [r4, #1]
     9c6:	2080      	movs	r0, #128	; 0x80
     9c8:	2b00      	cmp	r3, #0
     9ca:	d100      	bne.n	9ce <tcc_init+0x19a>
     9cc:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     9ce:	788f      	ldrb	r7, [r1, #2]
     9d0:	2308      	movs	r3, #8
     9d2:	2f00      	cmp	r7, #0
     9d4:	d100      	bne.n	9d8 <tcc_init+0x1a4>
     9d6:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     9d8:	78cf      	ldrb	r7, [r1, #3]
     9da:	46bb      	mov	fp, r7
     9dc:	2710      	movs	r7, #16
     9de:	465d      	mov	r5, fp
     9e0:	2d00      	cmp	r5, #0
     9e2:	d1b2      	bne.n	94a <tcc_init+0x116>
     9e4:	9f02      	ldr	r7, [sp, #8]
     9e6:	e7b0      	b.n	94a <tcc_init+0x116>
     9e8:	9e06      	ldr	r6, [sp, #24]
     9ea:	4644      	mov	r4, r8
     9ec:	464d      	mov	r5, r9
     9ee:	9b07      	ldr	r3, [sp, #28]
     9f0:	4648      	mov	r0, r9
     9f2:	3050      	adds	r0, #80	; 0x50
     9f4:	4649      	mov	r1, r9
     9f6:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     9f8:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     9fa:	2780      	movs	r7, #128	; 0x80
     9fc:	027f      	lsls	r7, r7, #9
     9fe:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     a00:	2701      	movs	r7, #1
     a02:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     a04:	2702      	movs	r7, #2
     a06:	37ff      	adds	r7, #255	; 0xff
     a08:	46ba      	mov	sl, r7
     a0a:	001f      	movs	r7, r3
     a0c:	0013      	movs	r3, r2
     a0e:	46a0      	mov	r8, r4
     a10:	003c      	movs	r4, r7
     a12:	e007      	b.n	a24 <tcc_init+0x1f0>
     a14:	4657      	mov	r7, sl
     a16:	4097      	lsls	r7, r2
     a18:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     a1a:	3201      	adds	r2, #1
     a1c:	3001      	adds	r0, #1
     a1e:	3102      	adds	r1, #2
     a20:	2a08      	cmp	r2, #8
     a22:	d00e      	beq.n	a42 <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
     a24:	7807      	ldrb	r7, [r0, #0]
     a26:	2f00      	cmp	r7, #0
     a28:	d002      	beq.n	a30 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     a2a:	4667      	mov	r7, ip
     a2c:	4097      	lsls	r7, r2
     a2e:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
     a30:	780f      	ldrb	r7, [r1, #0]
     a32:	2f00      	cmp	r7, #0
     a34:	d0f1      	beq.n	a1a <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     a36:	2f02      	cmp	r7, #2
     a38:	d0ec      	beq.n	a14 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     a3a:	464f      	mov	r7, r9
     a3c:	4097      	lsls	r7, r2
     a3e:	433b      	orrs	r3, r7
     a40:	e7eb      	b.n	a1a <tcc_init+0x1e6>
     a42:	0022      	movs	r2, r4
     a44:	4644      	mov	r4, r8
     a46:	4698      	mov	r8, r3
     a48:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     a4a:	7e6a      	ldrb	r2, [r5, #25]
     a4c:	0112      	lsls	r2, r2, #4
     a4e:	2130      	movs	r1, #48	; 0x30
     a50:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     a52:	7e28      	ldrb	r0, [r5, #24]
     a54:	2207      	movs	r2, #7
     a56:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     a58:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     a5a:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     a5c:	2080      	movs	r0, #128	; 0x80
     a5e:	0240      	lsls	r0, r0, #9
     a60:	000f      	movs	r7, r1
     a62:	e002      	b.n	a6a <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     a64:	3201      	adds	r2, #1
     a66:	2a04      	cmp	r2, #4
     a68:	d007      	beq.n	a7a <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
     a6a:	18a9      	adds	r1, r5, r2
     a6c:	7d09      	ldrb	r1, [r1, #20]
     a6e:	2900      	cmp	r1, #0
     a70:	d0f8      	beq.n	a64 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
     a72:	0001      	movs	r1, r0
     a74:	4091      	lsls	r1, r2
     a76:	430f      	orrs	r7, r1
     a78:	e7f4      	b.n	a64 <tcc_init+0x230>
     a7a:	46b9      	mov	r9, r7
     a7c:	1d32      	adds	r2, r6, #4
     a7e:	0030      	movs	r0, r6
     a80:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     a82:	2100      	movs	r1, #0
     a84:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     a86:	4290      	cmp	r0, r2
     a88:	d1fc      	bne.n	a84 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
     a8a:	2200      	movs	r2, #0
     a8c:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     a8e:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     a90:	009b      	lsls	r3, r3, #2
     a92:	4a3e      	ldr	r2, [pc, #248]	; (b8c <tcc_init+0x358>)
     a94:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
     a96:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     a98:	23a0      	movs	r3, #160	; 0xa0
     a9a:	5cea      	ldrb	r2, [r5, r3]
     a9c:	3b64      	subs	r3, #100	; 0x64
     a9e:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
     aa0:	a909      	add	r1, sp, #36	; 0x24
     aa2:	7aab      	ldrb	r3, [r5, #10]
     aa4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     aa6:	2011      	movs	r0, #17
     aa8:	4b39      	ldr	r3, [pc, #228]	; (b90 <tcc_init+0x35c>)
     aaa:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     aac:	2011      	movs	r0, #17
     aae:	4b39      	ldr	r3, [pc, #228]	; (b94 <tcc_init+0x360>)
     ab0:	4798      	blx	r3
     ab2:	002f      	movs	r7, r5
     ab4:	3798      	adds	r7, #152	; 0x98
     ab6:	002e      	movs	r6, r5
     ab8:	3658      	adds	r6, #88	; 0x58
     aba:	2378      	movs	r3, #120	; 0x78
     abc:	469a      	mov	sl, r3
     abe:	44aa      	add	sl, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ac0:	3b77      	subs	r3, #119	; 0x77
     ac2:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
     ac4:	0023      	movs	r3, r4
     ac6:	4654      	mov	r4, sl
     ac8:	469a      	mov	sl, r3
     aca:	e003      	b.n	ad4 <tcc_init+0x2a0>
     acc:	3701      	adds	r7, #1
     ace:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     ad0:	42b4      	cmp	r4, r6
     ad2:	d014      	beq.n	afe <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
     ad4:	783b      	ldrb	r3, [r7, #0]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d0f8      	beq.n	acc <tcc_init+0x298>
     ada:	ab08      	add	r3, sp, #32
     adc:	465a      	mov	r2, fp
     ade:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     ae0:	2300      	movs	r3, #0
     ae2:	aa08      	add	r2, sp, #32
     ae4:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     ae6:	0013      	movs	r3, r2
     ae8:	2220      	movs	r2, #32
     aea:	18b2      	adds	r2, r6, r2
     aec:	7812      	ldrb	r2, [r2, #0]
     aee:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     af0:	465a      	mov	r2, fp
     af2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     af4:	7830      	ldrb	r0, [r6, #0]
     af6:	0019      	movs	r1, r3
     af8:	4b27      	ldr	r3, [pc, #156]	; (b98 <tcc_init+0x364>)
     afa:	4798      	blx	r3
     afc:	e7e6      	b.n	acc <tcc_init+0x298>
     afe:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     b00:	9b04      	ldr	r3, [sp, #16]
     b02:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     b04:	9a05      	ldr	r2, [sp, #20]
     b06:	0212      	lsls	r2, r2, #8
     b08:	4313      	orrs	r3, r2
     b0a:	9a01      	ldr	r2, [sp, #4]
     b0c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     b0e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     b10:	2204      	movs	r2, #4
     b12:	68a3      	ldr	r3, [r4, #8]
     b14:	421a      	tst	r2, r3
     b16:	d1fc      	bne.n	b12 <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
     b18:	23ff      	movs	r3, #255	; 0xff
     b1a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     b1c:	2204      	movs	r2, #4
     b1e:	68a3      	ldr	r3, [r4, #8]
     b20:	421a      	tst	r2, r3
     b22:	d1fc      	bne.n	b1e <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
     b24:	466b      	mov	r3, sp
     b26:	7b1b      	ldrb	r3, [r3, #12]
     b28:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b2c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b30:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     b32:	4643      	mov	r3, r8
     b34:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     b36:	4a19      	ldr	r2, [pc, #100]	; (b9c <tcc_init+0x368>)
     b38:	68a3      	ldr	r3, [r4, #8]
     b3a:	4213      	tst	r3, r2
     b3c:	d1fc      	bne.n	b38 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
     b3e:	464b      	mov	r3, r9
     b40:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     b42:	2210      	movs	r2, #16
     b44:	68a3      	ldr	r3, [r4, #8]
     b46:	421a      	tst	r2, r3
     b48:	d1fc      	bne.n	b44 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
     b4a:	682b      	ldr	r3, [r5, #0]
     b4c:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     b4e:	4a14      	ldr	r2, [pc, #80]	; (ba0 <tcc_init+0x36c>)
     b50:	68a3      	ldr	r3, [r4, #8]
     b52:	4213      	tst	r3, r2
     b54:	d1fc      	bne.n	b50 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
     b56:	686b      	ldr	r3, [r5, #4]
     b58:	6423      	str	r3, [r4, #64]	; 0x40
     b5a:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     b5c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     b5e:	4811      	ldr	r0, [pc, #68]	; (ba4 <tcc_init+0x370>)
     b60:	0002      	movs	r2, r0
     b62:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     b64:	68a3      	ldr	r3, [r4, #8]
     b66:	421a      	tst	r2, r3
     b68:	d1fc      	bne.n	b64 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
     b6a:	cd04      	ldmia	r5!, {r2}
     b6c:	000b      	movs	r3, r1
     b6e:	3310      	adds	r3, #16
     b70:	009b      	lsls	r3, r3, #2
     b72:	18e3      	adds	r3, r4, r3
     b74:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     b76:	3101      	adds	r1, #1
     b78:	2904      	cmp	r1, #4
     b7a:	d1f1      	bne.n	b60 <tcc_init+0x32c>
	return STATUS_OK;
     b7c:	2000      	movs	r0, #0
     b7e:	e670      	b.n	862 <tcc_init+0x2e>
     b80:	0000069d 	.word	0x0000069d
     b84:	40000400 	.word	0x40000400
     b88:	00ffffff 	.word	0x00ffffff
     b8c:	2000010c 	.word	0x2000010c
     b90:	00001771 	.word	0x00001771
     b94:	000016e5 	.word	0x000016e5
     b98:	00001869 	.word	0x00001869
     b9c:	00020040 	.word	0x00020040
     ba0:	00040080 	.word	0x00040080
     ba4:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
     ba8:	2017      	movs	r0, #23
     baa:	e65a      	b.n	862 <tcc_init+0x2e>
     bac:	2017      	movs	r0, #23
     bae:	e658      	b.n	862 <tcc_init+0x2e>
     bb0:	2017      	movs	r0, #23
     bb2:	e656      	b.n	862 <tcc_init+0x2e>
     bb4:	2017      	movs	r0, #23
     bb6:	e654      	b.n	862 <tcc_init+0x2e>
     bb8:	2017      	movs	r0, #23
     bba:	e652      	b.n	862 <tcc_init+0x2e>

00000bbc <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
     bbc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
     bbe:	233c      	movs	r3, #60	; 0x3c
     bc0:	5cc3      	ldrb	r3, [r0, r3]
     bc2:	4c01      	ldr	r4, [pc, #4]	; (bc8 <tcc_set_compare_value+0xc>)
     bc4:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
     bc6:	bd10      	pop	{r4, pc}
     bc8:	000006a1 	.word	0x000006a1

00000bcc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bce:	46c6      	mov	lr, r8
     bd0:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     bd2:	0080      	lsls	r0, r0, #2
     bd4:	4b0e      	ldr	r3, [pc, #56]	; (c10 <_tcc_interrupt_handler+0x44>)
     bd6:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     bd8:	683b      	ldr	r3, [r7, #0]
     bda:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     be0:	4013      	ands	r3, r2
     be2:	401e      	ands	r6, r3
     be4:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     be6:	4b0b      	ldr	r3, [pc, #44]	; (c14 <_tcc_interrupt_handler+0x48>)
     be8:	4698      	mov	r8, r3
     bea:	e002      	b.n	bf2 <_tcc_interrupt_handler+0x26>
     bec:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     bee:	2c30      	cmp	r4, #48	; 0x30
     bf0:	d00a      	beq.n	c08 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     bf2:	4643      	mov	r3, r8
     bf4:	58e5      	ldr	r5, [r4, r3]
     bf6:	4235      	tst	r5, r6
     bf8:	d0f8      	beq.n	bec <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     bfa:	193b      	adds	r3, r7, r4
     bfc:	685b      	ldr	r3, [r3, #4]
     bfe:	0038      	movs	r0, r7
     c00:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     c02:	683b      	ldr	r3, [r7, #0]
     c04:	62dd      	str	r5, [r3, #44]	; 0x2c
     c06:	e7f1      	b.n	bec <_tcc_interrupt_handler+0x20>
		}
	}
}
     c08:	bc04      	pop	{r2}
     c0a:	4690      	mov	r8, r2
     c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	2000010c 	.word	0x2000010c
     c14:	00001b80 	.word	0x00001b80

00000c18 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     c18:	b510      	push	{r4, lr}
     c1a:	2000      	movs	r0, #0
     c1c:	4b01      	ldr	r3, [pc, #4]	; (c24 <TCC0_Handler+0xc>)
     c1e:	4798      	blx	r3
     c20:	bd10      	pop	{r4, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	00000bcd 	.word	0x00000bcd

00000c28 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     c28:	4b06      	ldr	r3, [pc, #24]	; (c44 <_tc_get_inst_index+0x1c>)
     c2a:	4298      	cmp	r0, r3
     c2c:	d008      	beq.n	c40 <_tc_get_inst_index+0x18>
     c2e:	4a06      	ldr	r2, [pc, #24]	; (c48 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     c30:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     c32:	4290      	cmp	r0, r2
     c34:	d001      	beq.n	c3a <_tc_get_inst_index+0x12>
}
     c36:	0018      	movs	r0, r3
     c38:	4770      	bx	lr
     c3a:	3301      	adds	r3, #1
			return i;
     c3c:	b2db      	uxtb	r3, r3
     c3e:	e7fa      	b.n	c36 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c40:	2300      	movs	r3, #0
     c42:	e7fb      	b.n	c3c <_tc_get_inst_index+0x14>
     c44:	42001800 	.word	0x42001800
     c48:	42001c00 	.word	0x42001c00

00000c4c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4e:	b085      	sub	sp, #20
     c50:	0004      	movs	r4, r0
     c52:	000d      	movs	r5, r1
     c54:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     c56:	0008      	movs	r0, r1
     c58:	4b82      	ldr	r3, [pc, #520]	; (e64 <tc_init+0x218>)
     c5a:	4798      	blx	r3
     c5c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     c5e:	ab03      	add	r3, sp, #12
     c60:	2212      	movs	r2, #18
     c62:	701a      	strb	r2, [r3, #0]
     c64:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     c66:	ab02      	add	r3, sp, #8
     c68:	322e      	adds	r2, #46	; 0x2e
     c6a:	801a      	strh	r2, [r3, #0]
     c6c:	3240      	adds	r2, #64	; 0x40
     c6e:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     c70:	2300      	movs	r3, #0
     c72:	60a3      	str	r3, [r4, #8]
     c74:	60e3      	str	r3, [r4, #12]
     c76:	6123      	str	r3, [r4, #16]
     c78:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     c7a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     c7c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     c7e:	0082      	lsls	r2, r0, #2
     c80:	4b79      	ldr	r3, [pc, #484]	; (e68 <tc_init+0x21c>)
     c82:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     c84:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c86:	78b3      	ldrb	r3, [r6, #2]
     c88:	2b08      	cmp	r3, #8
     c8a:	d006      	beq.n	c9a <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     c8c:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c8e:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c90:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     c92:	07db      	lsls	r3, r3, #31
     c94:	d505      	bpl.n	ca2 <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     c96:	b005      	add	sp, #20
     c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     c9a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c9c:	07fa      	lsls	r2, r7, #31
     c9e:	d4fa      	bmi.n	c96 <tc_init+0x4a>
     ca0:	e7f4      	b.n	c8c <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     ca2:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     ca4:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     ca6:	06db      	lsls	r3, r3, #27
     ca8:	d4f5      	bmi.n	c96 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     caa:	882b      	ldrh	r3, [r5, #0]
     cac:	079b      	lsls	r3, r3, #30
     cae:	d4f2      	bmi.n	c96 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
     cb0:	7c33      	ldrb	r3, [r6, #16]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d000      	beq.n	cb8 <tc_init+0x6c>
     cb6:	e07a      	b.n	dae <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
     cb8:	7f33      	ldrb	r3, [r6, #28]
     cba:	2b00      	cmp	r3, #0
     cbc:	d000      	beq.n	cc0 <tc_init+0x74>
     cbe:	e082      	b.n	dc6 <tc_init+0x17a>
     cc0:	496a      	ldr	r1, [pc, #424]	; (e6c <tc_init+0x220>)
     cc2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     cc4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     cc6:	ab02      	add	r3, sp, #8
     cc8:	5ad3      	ldrh	r3, [r2, r3]
     cca:	4303      	orrs	r3, r0
     ccc:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     cce:	78b3      	ldrb	r3, [r6, #2]
     cd0:	2b08      	cmp	r3, #8
     cd2:	d100      	bne.n	cd6 <tc_init+0x8a>
     cd4:	e087      	b.n	de6 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
     cd6:	7833      	ldrb	r3, [r6, #0]
     cd8:	466a      	mov	r2, sp
     cda:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     cdc:	ab03      	add	r3, sp, #12
     cde:	5ddf      	ldrb	r7, [r3, r7]
     ce0:	4669      	mov	r1, sp
     ce2:	0038      	movs	r0, r7
     ce4:	4b62      	ldr	r3, [pc, #392]	; (e70 <tc_init+0x224>)
     ce6:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     ce8:	0038      	movs	r0, r7
     cea:	4b62      	ldr	r3, [pc, #392]	; (e74 <tc_init+0x228>)
     cec:	4798      	blx	r3
	ctrla_tmp =
     cee:	8931      	ldrh	r1, [r6, #8]
     cf0:	88b3      	ldrh	r3, [r6, #4]
     cf2:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     cf4:	78b1      	ldrb	r1, [r6, #2]
     cf6:	79b2      	ldrb	r2, [r6, #6]
     cf8:	4311      	orrs	r1, r2
	ctrla_tmp =
     cfa:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     cfc:	7873      	ldrb	r3, [r6, #1]
     cfe:	2b00      	cmp	r3, #0
     d00:	d002      	beq.n	d08 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     d02:	2380      	movs	r3, #128	; 0x80
     d04:	011b      	lsls	r3, r3, #4
     d06:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d08:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d0a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d0c:	b25b      	sxtb	r3, r3
     d0e:	2b00      	cmp	r3, #0
     d10:	dbfb      	blt.n	d0a <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     d12:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     d14:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     d16:	1e4b      	subs	r3, r1, #1
     d18:	4199      	sbcs	r1, r3
     d1a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     d1c:	7bb3      	ldrb	r3, [r6, #14]
     d1e:	2b00      	cmp	r3, #0
     d20:	d001      	beq.n	d26 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     d22:	2301      	movs	r3, #1
     d24:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d26:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d28:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d2a:	b25b      	sxtb	r3, r3
     d2c:	2b00      	cmp	r3, #0
     d2e:	dbfb      	blt.n	d28 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     d30:	23ff      	movs	r3, #255	; 0xff
     d32:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     d34:	2900      	cmp	r1, #0
     d36:	d005      	beq.n	d44 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d3a:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     d3c:	b25b      	sxtb	r3, r3
     d3e:	2b00      	cmp	r3, #0
     d40:	dbfb      	blt.n	d3a <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     d42:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     d44:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     d46:	7af3      	ldrb	r3, [r6, #11]
     d48:	2b00      	cmp	r3, #0
     d4a:	d001      	beq.n	d50 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     d4c:	2310      	movs	r3, #16
     d4e:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     d50:	7b33      	ldrb	r3, [r6, #12]
     d52:	2b00      	cmp	r3, #0
     d54:	d001      	beq.n	d5a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     d56:	2320      	movs	r3, #32
     d58:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d5a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d5c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d5e:	b25b      	sxtb	r3, r3
     d60:	2b00      	cmp	r3, #0
     d62:	dbfb      	blt.n	d5c <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     d64:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d66:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d68:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     d6a:	b25b      	sxtb	r3, r3
     d6c:	2b00      	cmp	r3, #0
     d6e:	dbfb      	blt.n	d68 <tc_init+0x11c>
	switch (module_inst->counter_size) {
     d70:	7923      	ldrb	r3, [r4, #4]
     d72:	2b04      	cmp	r3, #4
     d74:	d03f      	beq.n	df6 <tc_init+0x1aa>
     d76:	2b08      	cmp	r3, #8
     d78:	d05e      	beq.n	e38 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
     d7a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     d7c:	2b00      	cmp	r3, #0
     d7e:	d000      	beq.n	d82 <tc_init+0x136>
     d80:	e789      	b.n	c96 <tc_init+0x4a>
     d82:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d84:	b25b      	sxtb	r3, r3
     d86:	2b00      	cmp	r3, #0
     d88:	dbfb      	blt.n	d82 <tc_init+0x136>
				= config->counter_16_bit.value;
     d8a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     d8c:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d8e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d90:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d92:	b25b      	sxtb	r3, r3
     d94:	2b00      	cmp	r3, #0
     d96:	dbfb      	blt.n	d90 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
     d98:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     d9a:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d9c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d9e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     da0:	b25b      	sxtb	r3, r3
     da2:	2b00      	cmp	r3, #0
     da4:	dbfb      	blt.n	d9e <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
     da6:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     da8:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     daa:	2000      	movs	r0, #0
     dac:	e773      	b.n	c96 <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dae:	a901      	add	r1, sp, #4
     db0:	2301      	movs	r3, #1
     db2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     db4:	2200      	movs	r2, #0
     db6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     db8:	7e32      	ldrb	r2, [r6, #24]
     dba:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     dbc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     dbe:	7d30      	ldrb	r0, [r6, #20]
     dc0:	4b2d      	ldr	r3, [pc, #180]	; (e78 <tc_init+0x22c>)
     dc2:	4798      	blx	r3
     dc4:	e778      	b.n	cb8 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dc6:	a901      	add	r1, sp, #4
     dc8:	2301      	movs	r3, #1
     dca:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     dcc:	2200      	movs	r2, #0
     dce:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     dd0:	3224      	adds	r2, #36	; 0x24
     dd2:	18b2      	adds	r2, r6, r2
     dd4:	7812      	ldrb	r2, [r2, #0]
     dd6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     dd8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     dda:	331f      	adds	r3, #31
     ddc:	18f3      	adds	r3, r6, r3
     dde:	7818      	ldrb	r0, [r3, #0]
     de0:	4b25      	ldr	r3, [pc, #148]	; (e78 <tc_init+0x22c>)
     de2:	4798      	blx	r3
     de4:	e76c      	b.n	cc0 <tc_init+0x74>
     de6:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     de8:	1c7a      	adds	r2, r7, #1
     dea:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     dec:	ab02      	add	r3, sp, #8
     dee:	5ad3      	ldrh	r3, [r2, r3]
     df0:	4303      	orrs	r3, r0
     df2:	620b      	str	r3, [r1, #32]
     df4:	e76f      	b.n	cd6 <tc_init+0x8a>
     df6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     df8:	b25b      	sxtb	r3, r3
     dfa:	2b00      	cmp	r3, #0
     dfc:	dbfb      	blt.n	df6 <tc_init+0x1aa>
					config->counter_8_bit.value;
     dfe:	2328      	movs	r3, #40	; 0x28
     e00:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     e02:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e04:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e06:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e08:	b25b      	sxtb	r3, r3
     e0a:	2b00      	cmp	r3, #0
     e0c:	dbfb      	blt.n	e06 <tc_init+0x1ba>
					config->counter_8_bit.period;
     e0e:	2329      	movs	r3, #41	; 0x29
     e10:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     e12:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e14:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e16:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e18:	b25b      	sxtb	r3, r3
     e1a:	2b00      	cmp	r3, #0
     e1c:	dbfb      	blt.n	e16 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
     e1e:	232a      	movs	r3, #42	; 0x2a
     e20:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     e22:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e24:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e26:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e28:	b25b      	sxtb	r3, r3
     e2a:	2b00      	cmp	r3, #0
     e2c:	dbfb      	blt.n	e26 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
     e2e:	232b      	movs	r3, #43	; 0x2b
     e30:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     e32:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     e34:	2000      	movs	r0, #0
     e36:	e72e      	b.n	c96 <tc_init+0x4a>
     e38:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e3a:	b25b      	sxtb	r3, r3
     e3c:	2b00      	cmp	r3, #0
     e3e:	dbfb      	blt.n	e38 <tc_init+0x1ec>
				= config->counter_32_bit.value;
     e40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e42:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e46:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e48:	b25b      	sxtb	r3, r3
     e4a:	2b00      	cmp	r3, #0
     e4c:	dbfb      	blt.n	e46 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
     e4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     e50:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     e56:	b25b      	sxtb	r3, r3
     e58:	2b00      	cmp	r3, #0
     e5a:	dbfb      	blt.n	e54 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
     e5c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     e5e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     e60:	2000      	movs	r0, #0
     e62:	e718      	b.n	c96 <tc_init+0x4a>
     e64:	00000c29 	.word	0x00000c29
     e68:	20000110 	.word	0x20000110
     e6c:	40000400 	.word	0x40000400
     e70:	00001771 	.word	0x00001771
     e74:	000016e5 	.word	0x000016e5
     e78:	00001869 	.word	0x00001869

00000e7c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     e7c:	1c93      	adds	r3, r2, #2
     e7e:	009b      	lsls	r3, r3, #2
     e80:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     e82:	2a02      	cmp	r2, #2
     e84:	d009      	beq.n	e9a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     e86:	2a03      	cmp	r2, #3
     e88:	d00c      	beq.n	ea4 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     e8a:	2301      	movs	r3, #1
     e8c:	4093      	lsls	r3, r2
     e8e:	001a      	movs	r2, r3
     e90:	7e03      	ldrb	r3, [r0, #24]
     e92:	4313      	orrs	r3, r2
     e94:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     e96:	2000      	movs	r0, #0
     e98:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     e9a:	7e03      	ldrb	r3, [r0, #24]
     e9c:	2210      	movs	r2, #16
     e9e:	4313      	orrs	r3, r2
     ea0:	7603      	strb	r3, [r0, #24]
     ea2:	e7f8      	b.n	e96 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     ea4:	7e03      	ldrb	r3, [r0, #24]
     ea6:	2220      	movs	r2, #32
     ea8:	4313      	orrs	r3, r2
     eaa:	7603      	strb	r3, [r0, #24]
     eac:	e7f3      	b.n	e96 <tc_register_callback+0x1a>
	...

00000eb0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eb2:	46de      	mov	lr, fp
     eb4:	4657      	mov	r7, sl
     eb6:	464e      	mov	r6, r9
     eb8:	4645      	mov	r5, r8
     eba:	b5e0      	push	{r5, r6, r7, lr}
	static volatile uint8_t pin_array_ID;



	/* Get device instance from the look-up table */
	struct tc_module *module = (struct tc_module *)_tc_instances[instance];
     ebc:	0080      	lsls	r0, r0, #2
     ebe:	4b99      	ldr	r3, [pc, #612]	; (1124 <_tc_interrupt_handler+0x274>)
     ec0:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg & module->register_callback_mask & module->enable_callback_mask;
     ec2:	6823      	ldr	r3, [r4, #0]
     ec4:	7b9b      	ldrb	r3, [r3, #14]
     ec6:	7e22      	ldrb	r2, [r4, #24]
     ec8:	7e61      	ldrb	r1, [r4, #25]
     eca:	4011      	ands	r1, r2
     ecc:	4019      	ands	r1, r3
			
	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     ece:	06cb      	lsls	r3, r1, #27
     ed0:	d400      	bmi.n	ed4 <_tc_interrupt_handler+0x24>
     ed2:	e086      	b.n	fe2 <_tc_interrupt_handler+0x132>
		if(first_time == false)
     ed4:	4b94      	ldr	r3, [pc, #592]	; (1128 <_tc_interrupt_handler+0x278>)
     ed6:	781b      	ldrb	r3, [r3, #0]
     ed8:	2b00      	cmp	r3, #0
     eda:	d17c      	bne.n	fd6 <_tc_interrupt_handler+0x126>
		{
			if(compare_array_ID != N_valid_compares)
     edc:	4b93      	ldr	r3, [pc, #588]	; (112c <_tc_interrupt_handler+0x27c>)
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	4a93      	ldr	r2, [pc, #588]	; (1130 <_tc_interrupt_handler+0x280>)
     ee2:	7812      	ldrb	r2, [r2, #0]
     ee4:	b2db      	uxtb	r3, r3
     ee6:	4293      	cmp	r3, r2
     ee8:	d011      	beq.n	f0e <_tc_interrupt_handler+0x5e>
			{
				*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
     eea:	4892      	ldr	r0, [pc, #584]	; (1134 <_tc_interrupt_handler+0x284>)
     eec:	7803      	ldrb	r3, [r0, #0]
     eee:	b2db      	uxtb	r3, r3
     ef0:	1c5a      	adds	r2, r3, #1
     ef2:	b2d2      	uxtb	r2, r2
     ef4:	7002      	strb	r2, [r0, #0]
     ef6:	4a90      	ldr	r2, [pc, #576]	; (1138 <_tc_interrupt_handler+0x288>)
     ef8:	5cd2      	ldrb	r2, [r2, r3]
     efa:	b2d2      	uxtb	r2, r2
     efc:	2301      	movs	r3, #1
     efe:	4093      	lsls	r3, r2
     f00:	4a8e      	ldr	r2, [pc, #568]	; (113c <_tc_interrupt_handler+0x28c>)
     f02:	6013      	str	r3, [r2, #0]
				compare_array_ID = compare_array_ID + 1;
     f04:	4a89      	ldr	r2, [pc, #548]	; (112c <_tc_interrupt_handler+0x27c>)
     f06:	7813      	ldrb	r3, [r2, #0]
     f08:	3301      	adds	r3, #1
     f0a:	b2db      	uxtb	r3, r3
     f0c:	7013      	strb	r3, [r2, #0]
			}
			
			if(compare_array_ID < N_valid_compares )
     f0e:	4b87      	ldr	r3, [pc, #540]	; (112c <_tc_interrupt_handler+0x27c>)
     f10:	781b      	ldrb	r3, [r3, #0]
     f12:	4a87      	ldr	r2, [pc, #540]	; (1130 <_tc_interrupt_handler+0x280>)
     f14:	7812      	ldrb	r2, [r2, #0]
     f16:	b2db      	uxtb	r3, r3
     f18:	4293      	cmp	r3, r2
     f1a:	d25f      	bcs.n	fdc <_tc_interrupt_handler+0x12c>
			{
				compare_value_last    = compare_array[compare_array_ID - 1];
     f1c:	4d83      	ldr	r5, [pc, #524]	; (112c <_tc_interrupt_handler+0x27c>)
     f1e:	782b      	ldrb	r3, [r5, #0]
     f20:	3b01      	subs	r3, #1
     f22:	4887      	ldr	r0, [pc, #540]	; (1140 <_tc_interrupt_handler+0x290>)
     f24:	5cc2      	ldrb	r2, [r0, r3]
     f26:	b2d2      	uxtb	r2, r2
     f28:	4b86      	ldr	r3, [pc, #536]	; (1144 <_tc_interrupt_handler+0x294>)
     f2a:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_array[compare_array_ID];
     f2c:	782b      	ldrb	r3, [r5, #0]
     f2e:	b2db      	uxtb	r3, r3
     f30:	5cc3      	ldrb	r3, [r0, r3]
     f32:	b2db      	uxtb	r3, r3
     f34:	4884      	ldr	r0, [pc, #528]	; (1148 <_tc_interrupt_handler+0x298>)
     f36:	7003      	strb	r3, [r0, #0]
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
     f38:	429a      	cmp	r2, r3
     f3a:	d136      	bne.n	faa <_tc_interrupt_handler+0xfa>
     f3c:	7828      	ldrb	r0, [r5, #0]
     f3e:	b2c0      	uxtb	r0, r0
     f40:	4b7b      	ldr	r3, [pc, #492]	; (1130 <_tc_interrupt_handler+0x280>)
     f42:	781b      	ldrb	r3, [r3, #0]
     f44:	3b01      	subs	r3, #1
     f46:	4298      	cmp	r0, r3
     f48:	dc3c      	bgt.n	fc4 <_tc_interrupt_handler+0x114>
				{
					//Enable the LED
					*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
     f4a:	4e7a      	ldr	r6, [pc, #488]	; (1134 <_tc_interrupt_handler+0x284>)
     f4c:	4b7a      	ldr	r3, [pc, #488]	; (1138 <_tc_interrupt_handler+0x288>)
     f4e:	4698      	mov	r8, r3
					compare_value_last	  = compare_array[compare_array_ID];
     f50:	0028      	movs	r0, r5
     f52:	4d7b      	ldr	r5, [pc, #492]	; (1140 <_tc_interrupt_handler+0x290>)
     f54:	4b7b      	ldr	r3, [pc, #492]	; (1144 <_tc_interrupt_handler+0x294>)
     f56:	469c      	mov	ip, r3
					compare_value_current = compare_array[++compare_array_ID];
     f58:	4f7b      	ldr	r7, [pc, #492]	; (1148 <_tc_interrupt_handler+0x298>)
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
     f5a:	4682      	mov	sl, r0
     f5c:	4b74      	ldr	r3, [pc, #464]	; (1130 <_tc_interrupt_handler+0x280>)
     f5e:	4699      	mov	r9, r3
					*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
     f60:	7833      	ldrb	r3, [r6, #0]
     f62:	b2db      	uxtb	r3, r3
     f64:	1c5a      	adds	r2, r3, #1
     f66:	b2d2      	uxtb	r2, r2
     f68:	7032      	strb	r2, [r6, #0]
     f6a:	4642      	mov	r2, r8
     f6c:	5cd2      	ldrb	r2, [r2, r3]
     f6e:	b2d2      	uxtb	r2, r2
     f70:	2301      	movs	r3, #1
     f72:	4093      	lsls	r3, r2
     f74:	4a71      	ldr	r2, [pc, #452]	; (113c <_tc_interrupt_handler+0x28c>)
     f76:	6013      	str	r3, [r2, #0]
					compare_value_last	  = compare_array[compare_array_ID];
     f78:	7803      	ldrb	r3, [r0, #0]
     f7a:	b2db      	uxtb	r3, r3
     f7c:	5cea      	ldrb	r2, [r5, r3]
     f7e:	b2d2      	uxtb	r2, r2
     f80:	4663      	mov	r3, ip
     f82:	701a      	strb	r2, [r3, #0]
					compare_value_current = compare_array[++compare_array_ID];
     f84:	7803      	ldrb	r3, [r0, #0]
     f86:	3301      	adds	r3, #1
     f88:	b2db      	uxtb	r3, r3
     f8a:	7003      	strb	r3, [r0, #0]
     f8c:	5ceb      	ldrb	r3, [r5, r3]
     f8e:	b2db      	uxtb	r3, r3
     f90:	703b      	strb	r3, [r7, #0]
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
     f92:	429a      	cmp	r2, r3
     f94:	d109      	bne.n	faa <_tc_interrupt_handler+0xfa>
     f96:	4652      	mov	r2, sl
     f98:	7812      	ldrb	r2, [r2, #0]
     f9a:	b2d2      	uxtb	r2, r2
     f9c:	4693      	mov	fp, r2
     f9e:	464a      	mov	r2, r9
     fa0:	7812      	ldrb	r2, [r2, #0]
     fa2:	3a01      	subs	r2, #1
     fa4:	4593      	cmp	fp, r2
     fa6:	dddb      	ble.n	f60 <_tc_interrupt_handler+0xb0>
					compare_value_current = compare_array[++compare_array_ID];
     fa8:	001a      	movs	r2, r3
				}
				if(compare_value_current != 255)
     faa:	2bff      	cmp	r3, #255	; 0xff
     fac:	d00c      	beq.n	fc8 <_tc_interrupt_handler+0x118>
				{
					//check sync
					while((*STATUS_REGISTER && MASK_SYNC) == true);
     fae:	4867      	ldr	r0, [pc, #412]	; (114c <_tc_interrupt_handler+0x29c>)
     fb0:	7802      	ldrb	r2, [r0, #0]
     fb2:	2a00      	cmp	r2, #0
     fb4:	d1fc      	bne.n	fb0 <_tc_interrupt_handler+0x100>
					*COMPARE_REGISTER         =	compare_value_current;
     fb6:	4a66      	ldr	r2, [pc, #408]	; (1150 <_tc_interrupt_handler+0x2a0>)
     fb8:	7013      	strb	r3, [r2, #0]
					*COUNT_REGISTER           =	compare_value_last;			
     fba:	4b62      	ldr	r3, [pc, #392]	; (1144 <_tc_interrupt_handler+0x294>)
     fbc:	781a      	ldrb	r2, [r3, #0]
     fbe:	4b65      	ldr	r3, [pc, #404]	; (1154 <_tc_interrupt_handler+0x2a4>)
     fc0:	701a      	strb	r2, [r3, #0]
     fc2:	e00b      	b.n	fdc <_tc_interrupt_handler+0x12c>
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
     fc4:	0013      	movs	r3, r2
     fc6:	e7f0      	b.n	faa <_tc_interrupt_handler+0xfa>
				}
				else
				{
					while((*STATUS_REGISTER && MASK_SYNC) == true);
     fc8:	4860      	ldr	r0, [pc, #384]	; (114c <_tc_interrupt_handler+0x29c>)
     fca:	7803      	ldrb	r3, [r0, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d1fc      	bne.n	fca <_tc_interrupt_handler+0x11a>
					*COUNT_REGISTER         =	compare_value_last;
     fd0:	4b60      	ldr	r3, [pc, #384]	; (1154 <_tc_interrupt_handler+0x2a4>)
     fd2:	701a      	strb	r2, [r3, #0]
     fd4:	e002      	b.n	fdc <_tc_interrupt_handler+0x12c>
			
			
		}
		else
		{
			first_time = false;
     fd6:	2200      	movs	r2, #0
     fd8:	4b53      	ldr	r3, [pc, #332]	; (1128 <_tc_interrupt_handler+0x278>)
     fda:	701a      	strb	r2, [r3, #0]
			
		}
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     fdc:	2310      	movs	r3, #16
     fde:	6822      	ldr	r2, [r4, #0]
     fe0:	7393      	strb	r3, [r2, #14]
	}
	
	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     fe2:	07cb      	lsls	r3, r1, #31
     fe4:	d400      	bmi.n	fe8 <_tc_interrupt_handler+0x138>
     fe6:	e08d      	b.n	1104 <_tc_interrupt_handler+0x254>
	
		serial_timeout_count++;
     fe8:	4a5b      	ldr	r2, [pc, #364]	; (1158 <_tc_interrupt_handler+0x2a8>)
     fea:	7813      	ldrb	r3, [r2, #0]
     fec:	3301      	adds	r3, #1
     fee:	b2db      	uxtb	r3, r3
     ff0:	7013      	strb	r3, [r2, #0]
		if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
     ff2:	7813      	ldrb	r3, [r2, #0]
     ff4:	b2db      	uxtb	r3, r3
     ff6:	2b02      	cmp	r3, #2
     ff8:	d905      	bls.n	1006 <_tc_interrupt_handler+0x156>
		{
			serial_timeout = true;
     ffa:	2201      	movs	r2, #1
     ffc:	4b57      	ldr	r3, [pc, #348]	; (115c <_tc_interrupt_handler+0x2ac>)
     ffe:	701a      	strb	r2, [r3, #0]
			serial_timeout_count = 0;
    1000:	2200      	movs	r2, #0
    1002:	4b55      	ldr	r3, [pc, #340]	; (1158 <_tc_interrupt_handler+0x2a8>)
    1004:	701a      	strb	r2, [r3, #0]
		}
		*PORT_CLEAR_REGISTER						  = CLEAR_ORB;
    1006:	22c8      	movs	r2, #200	; 0xc8
    1008:	0612      	lsls	r2, r2, #24
    100a:	4b55      	ldr	r3, [pc, #340]	; (1160 <_tc_interrupt_handler+0x2b0>)
    100c:	601a      	str	r2, [r3, #0]
		if(update_compare_array == true)
    100e:	4b55      	ldr	r3, [pc, #340]	; (1164 <_tc_interrupt_handler+0x2b4>)
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	2b00      	cmp	r3, #0
    1014:	d059      	beq.n	10ca <_tc_interrupt_handler+0x21a>
		{
			//B2 on 
			//*PORT_SET = B2_RGB;
			if(int_enable == true)
    1016:	4b54      	ldr	r3, [pc, #336]	; (1168 <_tc_interrupt_handler+0x2b8>)
    1018:	781b      	ldrb	r3, [r3, #0]
    101a:	2b00      	cmp	r3, #0
    101c:	d018      	beq.n	1050 <_tc_interrupt_handler+0x1a0>
			{
				int_enable = false;
    101e:	2200      	movs	r2, #0
    1020:	4b51      	ldr	r3, [pc, #324]	; (1168 <_tc_interrupt_handler+0x2b8>)
    1022:	701a      	strb	r2, [r3, #0]
				if(led_disable_flag == true)
    1024:	4b51      	ldr	r3, [pc, #324]	; (116c <_tc_interrupt_handler+0x2bc>)
    1026:	781b      	ldrb	r3, [r3, #0]
    1028:	2b00      	cmp	r3, #0
    102a:	d11d      	bne.n	1068 <_tc_interrupt_handler+0x1b8>
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    102c:	6820      	ldr	r0, [r4, #0]
    102e:	4b50      	ldr	r3, [pc, #320]	; (1170 <_tc_interrupt_handler+0x2c0>)
    1030:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1032:	4b50      	ldr	r3, [pc, #320]	; (1174 <_tc_interrupt_handler+0x2c4>)
    1034:	5c1b      	ldrb	r3, [r3, r0]
    1036:	221f      	movs	r2, #31
    1038:	401a      	ands	r2, r3
    103a:	2301      	movs	r3, #1
    103c:	4093      	lsls	r3, r2
    103e:	4a4e      	ldr	r2, [pc, #312]	; (1178 <_tc_interrupt_handler+0x2c8>)
    1040:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1042:	7e63      	ldrb	r3, [r4, #25]
    1044:	2210      	movs	r2, #16
    1046:	4313      	orrs	r3, r2
    1048:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    104a:	2310      	movs	r3, #16
    104c:	6822      	ldr	r2, [r4, #0]
    104e:	7353      	strb	r3, [r2, #13]
			}
			
			//transfer_temp();
			//if(lock_temp_array == false)
			//{
				N_valid_compares = 0;
    1050:	2200      	movs	r2, #0
    1052:	4b37      	ldr	r3, [pc, #220]	; (1130 <_tc_interrupt_handler+0x280>)
    1054:	701a      	strb	r2, [r3, #0]
    1056:	2300      	movs	r3, #0
			
				for(i=0;i<NO_OF_LEDS;i++)
				{
					//N_valid_compares++;
				
					if(temp_compare_array[i] != 255)
    1058:	4a48      	ldr	r2, [pc, #288]	; (117c <_tc_interrupt_handler+0x2cc>)
    105a:	4690      	mov	r8, r2
					{
						N_valid_compares++;
    105c:	4834      	ldr	r0, [pc, #208]	; (1130 <_tc_interrupt_handler+0x280>)
						//k++;
					}
				
					compare_array[i] = temp_compare_array[i] ;
    105e:	4694      	mov	ip, r2
    1060:	4f37      	ldr	r7, [pc, #220]	; (1140 <_tc_interrupt_handler+0x290>)
					pin_array[i]	 = temp_pin_array[i];
    1062:	4e47      	ldr	r6, [pc, #284]	; (1180 <_tc_interrupt_handler+0x2d0>)
    1064:	4d34      	ldr	r5, [pc, #208]	; (1138 <_tc_interrupt_handler+0x288>)
    1066:	e022      	b.n	10ae <_tc_interrupt_handler+0x1fe>
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1068:	6820      	ldr	r0, [r4, #0]
    106a:	4b41      	ldr	r3, [pc, #260]	; (1170 <_tc_interrupt_handler+0x2c0>)
    106c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    106e:	4b41      	ldr	r3, [pc, #260]	; (1174 <_tc_interrupt_handler+0x2c4>)
    1070:	5c1b      	ldrb	r3, [r3, r0]
    1072:	221f      	movs	r2, #31
    1074:	401a      	ands	r2, r3
    1076:	2301      	movs	r3, #1
    1078:	4093      	lsls	r3, r2
    107a:	4a3f      	ldr	r2, [pc, #252]	; (1178 <_tc_interrupt_handler+0x2c8>)
    107c:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    107e:	7e63      	ldrb	r3, [r4, #25]
    1080:	2210      	movs	r2, #16
    1082:	4313      	orrs	r3, r2
    1084:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1086:	2310      	movs	r3, #16
    1088:	6822      	ldr	r2, [r4, #0]
    108a:	7353      	strb	r3, [r2, #13]
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    108c:	3301      	adds	r3, #1
    108e:	6822      	ldr	r2, [r4, #0]
    1090:	7393      	strb	r3, [r2, #14]
					led_disable_flag = false;
    1092:	2200      	movs	r2, #0
    1094:	4b35      	ldr	r3, [pc, #212]	; (116c <_tc_interrupt_handler+0x2bc>)
    1096:	701a      	strb	r2, [r3, #0]
    1098:	e7c8      	b.n	102c <_tc_interrupt_handler+0x17c>
					compare_array[i] = temp_compare_array[i] ;
    109a:	4661      	mov	r1, ip
    109c:	5c89      	ldrb	r1, [r1, r2]
    109e:	b2c9      	uxtb	r1, r1
    10a0:	54b9      	strb	r1, [r7, r2]
					pin_array[i]	 = temp_pin_array[i];
    10a2:	5cb1      	ldrb	r1, [r6, r2]
    10a4:	b2c9      	uxtb	r1, r1
    10a6:	54a9      	strb	r1, [r5, r2]
    10a8:	3301      	adds	r3, #1
				for(i=0;i<NO_OF_LEDS;i++)
    10aa:	2b03      	cmp	r3, #3
    10ac:	d00a      	beq.n	10c4 <_tc_interrupt_handler+0x214>
					if(temp_compare_array[i] != 255)
    10ae:	001a      	movs	r2, r3
    10b0:	4641      	mov	r1, r8
    10b2:	5cc9      	ldrb	r1, [r1, r3]
    10b4:	b2c9      	uxtb	r1, r1
    10b6:	29ff      	cmp	r1, #255	; 0xff
    10b8:	d0ef      	beq.n	109a <_tc_interrupt_handler+0x1ea>
						N_valid_compares++;
    10ba:	7801      	ldrb	r1, [r0, #0]
    10bc:	3101      	adds	r1, #1
    10be:	b2c9      	uxtb	r1, r1
    10c0:	7001      	strb	r1, [r0, #0]
    10c2:	e7ea      	b.n	109a <_tc_interrupt_handler+0x1ea>
				}
				
			//}
			update_compare_array = false;
    10c4:	2200      	movs	r2, #0
    10c6:	4b27      	ldr	r3, [pc, #156]	; (1164 <_tc_interrupt_handler+0x2b4>)
    10c8:	701a      	strb	r2, [r3, #0]
			//*PORT_CLEAR_REGISTER = B2_RGB;
		}
		compare_array_ID = 0;
    10ca:	2300      	movs	r3, #0
    10cc:	4a17      	ldr	r2, [pc, #92]	; (112c <_tc_interrupt_handler+0x27c>)
    10ce:	7013      	strb	r3, [r2, #0]
		pin_array_ID  = 0;
    10d0:	4a18      	ldr	r2, [pc, #96]	; (1134 <_tc_interrupt_handler+0x284>)
    10d2:	7013      	strb	r3, [r2, #0]
		
		compare_value = compare_array[0];
    10d4:	4b1a      	ldr	r3, [pc, #104]	; (1140 <_tc_interrupt_handler+0x290>)
    10d6:	7819      	ldrb	r1, [r3, #0]
    10d8:	b2c9      	uxtb	r1, r1
		if(compare_value != 255)
    10da:	29ff      	cmp	r1, #255	; 0xff
    10dc:	d018      	beq.n	1110 <_tc_interrupt_handler+0x260>
		{
			
			led_disable_flag = true;
    10de:	2201      	movs	r2, #1
    10e0:	4b22      	ldr	r3, [pc, #136]	; (116c <_tc_interrupt_handler+0x2bc>)
    10e2:	701a      	strb	r2, [r3, #0]
			//Check sync busy
			while((*STATUS_REGISTER && MASK_SYNC) == true);
    10e4:	4a19      	ldr	r2, [pc, #100]	; (114c <_tc_interrupt_handler+0x29c>)
    10e6:	7813      	ldrb	r3, [r2, #0]
    10e8:	2b00      	cmp	r3, #0
    10ea:	d1fc      	bne.n	10e6 <_tc_interrupt_handler+0x236>
			//Update the compare value
			*COMPARE_REGISTER  = compare_value;
    10ec:	4b18      	ldr	r3, [pc, #96]	; (1150 <_tc_interrupt_handler+0x2a0>)
    10ee:	7019      	strb	r1, [r3, #0]
		else
		{
			int_enable = true;
			tc_disable_callback(module, TC_CALLBACK_CC_CHANNEL0);
		}
		while((*STATUS_REGISTER && MASK_SYNC) == true);
    10f0:	4a16      	ldr	r2, [pc, #88]	; (114c <_tc_interrupt_handler+0x29c>)
    10f2:	7813      	ldrb	r3, [r2, #0]
    10f4:	2b00      	cmp	r3, #0
    10f6:	d1fc      	bne.n	10f2 <_tc_interrupt_handler+0x242>
		*COUNT_REGISTER           =	0;
    10f8:	2200      	movs	r2, #0
    10fa:	4b16      	ldr	r3, [pc, #88]	; (1154 <_tc_interrupt_handler+0x2a4>)
    10fc:	701a      	strb	r2, [r3, #0]
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    10fe:	6823      	ldr	r3, [r4, #0]
    1100:	3201      	adds	r2, #1
    1102:	739a      	strb	r2, [r3, #14]

	}
	
	
}
    1104:	bc3c      	pop	{r2, r3, r4, r5}
    1106:	4690      	mov	r8, r2
    1108:	4699      	mov	r9, r3
    110a:	46a2      	mov	sl, r4
    110c:	46ab      	mov	fp, r5
    110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			int_enable = true;
    1110:	2201      	movs	r2, #1
    1112:	4b15      	ldr	r3, [pc, #84]	; (1168 <_tc_interrupt_handler+0x2b8>)
    1114:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    1116:	320f      	adds	r2, #15
    1118:	6823      	ldr	r3, [r4, #0]
    111a:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    111c:	7e63      	ldrb	r3, [r4, #25]
    111e:	4393      	bics	r3, r2
    1120:	7663      	strb	r3, [r4, #25]
    1122:	e7e5      	b.n	10f0 <_tc_interrupt_handler+0x240>
    1124:	20000110 	.word	0x20000110
    1128:	20000001 	.word	0x20000001
    112c:	20000073 	.word	0x20000073
    1130:	20000000 	.word	0x20000000
    1134:	2000007b 	.word	0x2000007b
    1138:	20000078 	.word	0x20000078
    113c:	41004418 	.word	0x41004418
    1140:	20000070 	.word	0x20000070
    1144:	20000075 	.word	0x20000075
    1148:	20000074 	.word	0x20000074
    114c:	4200180f 	.word	0x4200180f
    1150:	42001818 	.word	0x42001818
    1154:	42001810 	.word	0x42001810
    1158:	200000aa 	.word	0x200000aa
    115c:	200000a9 	.word	0x200000a9
    1160:	41004414 	.word	0x41004414
    1164:	200000ab 	.word	0x200000ab
    1168:	20000076 	.word	0x20000076
    116c:	20000077 	.word	0x20000077
    1170:	00000c29 	.word	0x00000c29
    1174:	00001bb0 	.word	0x00001bb0
    1178:	e000e100 	.word	0xe000e100
    117c:	2000011c 	.word	0x2000011c
    1180:	20000124 	.word	0x20000124

00001184 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1184:	b510      	push	{r4, lr}
    1186:	2000      	movs	r0, #0
    1188:	4b01      	ldr	r3, [pc, #4]	; (1190 <TC1_Handler+0xc>)
    118a:	4798      	blx	r3
    118c:	bd10      	pop	{r4, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	00000eb1 	.word	0x00000eb1

00001194 <TC2_Handler>:
    1194:	b510      	push	{r4, lr}
    1196:	2001      	movs	r0, #1
    1198:	4b01      	ldr	r3, [pc, #4]	; (11a0 <TC2_Handler+0xc>)
    119a:	4798      	blx	r3
    119c:	bd10      	pop	{r4, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	00000eb1 	.word	0x00000eb1

000011a4 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    11a4:	b510      	push	{r4, lr}
    11a6:	4b02      	ldr	r3, [pc, #8]	; (11b0 <SERCOM0_Handler+0xc>)
    11a8:	681b      	ldr	r3, [r3, #0]
    11aa:	2000      	movs	r0, #0
    11ac:	4798      	blx	r3
    11ae:	bd10      	pop	{r4, pc}
    11b0:	2000007c 	.word	0x2000007c

000011b4 <SERCOM1_Handler>:
    11b4:	b510      	push	{r4, lr}
    11b6:	4b02      	ldr	r3, [pc, #8]	; (11c0 <SERCOM1_Handler+0xc>)
    11b8:	685b      	ldr	r3, [r3, #4]
    11ba:	2001      	movs	r0, #1
    11bc:	4798      	blx	r3
    11be:	bd10      	pop	{r4, pc}
    11c0:	2000007c 	.word	0x2000007c

000011c4 <SERCOM2_Handler>:
    11c4:	b510      	push	{r4, lr}
    11c6:	4b02      	ldr	r3, [pc, #8]	; (11d0 <SERCOM2_Handler+0xc>)
    11c8:	689b      	ldr	r3, [r3, #8]
    11ca:	2002      	movs	r0, #2
    11cc:	4798      	blx	r3
    11ce:	bd10      	pop	{r4, pc}
    11d0:	2000007c 	.word	0x2000007c

000011d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    11d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    11d6:	2200      	movs	r2, #0
    11d8:	4b10      	ldr	r3, [pc, #64]	; (121c <EIC_Handler+0x48>)
    11da:	701a      	strb	r2, [r3, #0]
    11dc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    11de:	4910      	ldr	r1, [pc, #64]	; (1220 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    11e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    11e2:	4e10      	ldr	r6, [pc, #64]	; (1224 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    11e4:	4c0d      	ldr	r4, [pc, #52]	; (121c <EIC_Handler+0x48>)
    11e6:	e00a      	b.n	11fe <EIC_Handler+0x2a>
		return eics[eic_index];
    11e8:	490d      	ldr	r1, [pc, #52]	; (1220 <EIC_Handler+0x4c>)
    11ea:	e008      	b.n	11fe <EIC_Handler+0x2a>
    11ec:	7823      	ldrb	r3, [r4, #0]
    11ee:	3301      	adds	r3, #1
    11f0:	b2db      	uxtb	r3, r3
    11f2:	7023      	strb	r3, [r4, #0]
    11f4:	2b0f      	cmp	r3, #15
    11f6:	d810      	bhi.n	121a <EIC_Handler+0x46>
		return NULL;
    11f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    11fa:	2b1f      	cmp	r3, #31
    11fc:	d9f4      	bls.n	11e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    11fe:	0028      	movs	r0, r5
    1200:	4018      	ands	r0, r3
    1202:	2201      	movs	r2, #1
    1204:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1206:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1208:	4210      	tst	r0, r2
    120a:	d0ef      	beq.n	11ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    120c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    120e:	009b      	lsls	r3, r3, #2
    1210:	599b      	ldr	r3, [r3, r6]
    1212:	2b00      	cmp	r3, #0
    1214:	d0ea      	beq.n	11ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1216:	4798      	blx	r3
    1218:	e7e8      	b.n	11ec <EIC_Handler+0x18>
			}
		}
	}
}
    121a:	bd70      	pop	{r4, r5, r6, pc}
    121c:	20000118 	.word	0x20000118
    1220:	40001800 	.word	0x40001800
    1224:	200000cc 	.word	0x200000cc

00001228 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1228:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    122a:	2000      	movs	r0, #0
    122c:	4b08      	ldr	r3, [pc, #32]	; (1250 <delay_init+0x28>)
    122e:	4798      	blx	r3
    1230:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1232:	4c08      	ldr	r4, [pc, #32]	; (1254 <delay_init+0x2c>)
    1234:	21fa      	movs	r1, #250	; 0xfa
    1236:	0089      	lsls	r1, r1, #2
    1238:	47a0      	blx	r4
    123a:	4b07      	ldr	r3, [pc, #28]	; (1258 <delay_init+0x30>)
    123c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    123e:	4907      	ldr	r1, [pc, #28]	; (125c <delay_init+0x34>)
    1240:	0028      	movs	r0, r5
    1242:	47a0      	blx	r4
    1244:	4b06      	ldr	r3, [pc, #24]	; (1260 <delay_init+0x38>)
    1246:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1248:	2205      	movs	r2, #5
    124a:	4b06      	ldr	r3, [pc, #24]	; (1264 <delay_init+0x3c>)
    124c:	601a      	str	r2, [r3, #0]
}
    124e:	bd70      	pop	{r4, r5, r6, pc}
    1250:	00001659 	.word	0x00001659
    1254:	00001a1d 	.word	0x00001a1d
    1258:	20000004 	.word	0x20000004
    125c:	000f4240 	.word	0x000f4240
    1260:	20000008 	.word	0x20000008
    1264:	e000e010 	.word	0xe000e010

00001268 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1268:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    126a:	4b08      	ldr	r3, [pc, #32]	; (128c <delay_cycles_ms+0x24>)
    126c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    126e:	4a08      	ldr	r2, [pc, #32]	; (1290 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1270:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1272:	2180      	movs	r1, #128	; 0x80
    1274:	0249      	lsls	r1, r1, #9
	while (n--) {
    1276:	3801      	subs	r0, #1
    1278:	d307      	bcc.n	128a <delay_cycles_ms+0x22>
	if (n > 0) {
    127a:	2c00      	cmp	r4, #0
    127c:	d0fb      	beq.n	1276 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    127e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1280:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1282:	6813      	ldr	r3, [r2, #0]
    1284:	420b      	tst	r3, r1
    1286:	d0fc      	beq.n	1282 <delay_cycles_ms+0x1a>
    1288:	e7f5      	b.n	1276 <delay_cycles_ms+0xe>
	}
}
    128a:	bd30      	pop	{r4, r5, pc}
    128c:	20000004 	.word	0x20000004
    1290:	e000e010 	.word	0xe000e010

00001294 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1294:	b500      	push	{lr}
    1296:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1298:	ab01      	add	r3, sp, #4
    129a:	2280      	movs	r2, #128	; 0x80
    129c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    129e:	780a      	ldrb	r2, [r1, #0]
    12a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    12a2:	784a      	ldrb	r2, [r1, #1]
    12a4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    12a6:	788a      	ldrb	r2, [r1, #2]
    12a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    12aa:	0019      	movs	r1, r3
    12ac:	4b01      	ldr	r3, [pc, #4]	; (12b4 <port_pin_set_config+0x20>)
    12ae:	4798      	blx	r3
}
    12b0:	b003      	add	sp, #12
    12b2:	bd00      	pop	{pc}
    12b4:	00001869 	.word	0x00001869

000012b8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    12b8:	4770      	bx	lr
	...

000012bc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    12bc:	4b0c      	ldr	r3, [pc, #48]	; (12f0 <cpu_irq_enter_critical+0x34>)
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	2b00      	cmp	r3, #0
    12c2:	d106      	bne.n	12d2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    12c4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    12c8:	2b00      	cmp	r3, #0
    12ca:	d007      	beq.n	12dc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    12cc:	2200      	movs	r2, #0
    12ce:	4b09      	ldr	r3, [pc, #36]	; (12f4 <cpu_irq_enter_critical+0x38>)
    12d0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    12d2:	4a07      	ldr	r2, [pc, #28]	; (12f0 <cpu_irq_enter_critical+0x34>)
    12d4:	6813      	ldr	r3, [r2, #0]
    12d6:	3301      	adds	r3, #1
    12d8:	6013      	str	r3, [r2, #0]
}
    12da:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    12dc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    12de:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    12e2:	2200      	movs	r2, #0
    12e4:	4b04      	ldr	r3, [pc, #16]	; (12f8 <cpu_irq_enter_critical+0x3c>)
    12e6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    12e8:	3201      	adds	r2, #1
    12ea:	4b02      	ldr	r3, [pc, #8]	; (12f4 <cpu_irq_enter_critical+0x38>)
    12ec:	701a      	strb	r2, [r3, #0]
    12ee:	e7f0      	b.n	12d2 <cpu_irq_enter_critical+0x16>
    12f0:	20000088 	.word	0x20000088
    12f4:	2000008c 	.word	0x2000008c
    12f8:	2000000c 	.word	0x2000000c

000012fc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    12fc:	4b08      	ldr	r3, [pc, #32]	; (1320 <cpu_irq_leave_critical+0x24>)
    12fe:	681a      	ldr	r2, [r3, #0]
    1300:	3a01      	subs	r2, #1
    1302:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	2b00      	cmp	r3, #0
    1308:	d109      	bne.n	131e <cpu_irq_leave_critical+0x22>
    130a:	4b06      	ldr	r3, [pc, #24]	; (1324 <cpu_irq_leave_critical+0x28>)
    130c:	781b      	ldrb	r3, [r3, #0]
    130e:	2b00      	cmp	r3, #0
    1310:	d005      	beq.n	131e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1312:	2201      	movs	r2, #1
    1314:	4b04      	ldr	r3, [pc, #16]	; (1328 <cpu_irq_leave_critical+0x2c>)
    1316:	701a      	strb	r2, [r3, #0]
    1318:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    131c:	b662      	cpsie	i
	}
}
    131e:	4770      	bx	lr
    1320:	20000088 	.word	0x20000088
    1324:	2000008c 	.word	0x2000008c
    1328:	2000000c 	.word	0x2000000c

0000132c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    132c:	b510      	push	{r4, lr}
	switch (clock_source) {
    132e:	2808      	cmp	r0, #8
    1330:	d803      	bhi.n	133a <system_clock_source_get_hz+0xe>
    1332:	0080      	lsls	r0, r0, #2
    1334:	4b1b      	ldr	r3, [pc, #108]	; (13a4 <system_clock_source_get_hz+0x78>)
    1336:	581b      	ldr	r3, [r3, r0]
    1338:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    133a:	2000      	movs	r0, #0
    133c:	e030      	b.n	13a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    133e:	4b1a      	ldr	r3, [pc, #104]	; (13a8 <system_clock_source_get_hz+0x7c>)
    1340:	6918      	ldr	r0, [r3, #16]
    1342:	e02d      	b.n	13a0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1344:	4b19      	ldr	r3, [pc, #100]	; (13ac <system_clock_source_get_hz+0x80>)
    1346:	6a1b      	ldr	r3, [r3, #32]
    1348:	059b      	lsls	r3, r3, #22
    134a:	0f9b      	lsrs	r3, r3, #30
    134c:	4818      	ldr	r0, [pc, #96]	; (13b0 <system_clock_source_get_hz+0x84>)
    134e:	40d8      	lsrs	r0, r3
    1350:	e026      	b.n	13a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1352:	4b15      	ldr	r3, [pc, #84]	; (13a8 <system_clock_source_get_hz+0x7c>)
    1354:	6958      	ldr	r0, [r3, #20]
    1356:	e023      	b.n	13a0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1358:	4b13      	ldr	r3, [pc, #76]	; (13a8 <system_clock_source_get_hz+0x7c>)
    135a:	681b      	ldr	r3, [r3, #0]
			return 0;
    135c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    135e:	079b      	lsls	r3, r3, #30
    1360:	d51e      	bpl.n	13a0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1362:	4912      	ldr	r1, [pc, #72]	; (13ac <system_clock_source_get_hz+0x80>)
    1364:	2210      	movs	r2, #16
    1366:	68cb      	ldr	r3, [r1, #12]
    1368:	421a      	tst	r2, r3
    136a:	d0fc      	beq.n	1366 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    136c:	4b0e      	ldr	r3, [pc, #56]	; (13a8 <system_clock_source_get_hz+0x7c>)
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	075b      	lsls	r3, r3, #29
    1372:	d401      	bmi.n	1378 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1374:	480f      	ldr	r0, [pc, #60]	; (13b4 <system_clock_source_get_hz+0x88>)
    1376:	e013      	b.n	13a0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1378:	2000      	movs	r0, #0
    137a:	4b0f      	ldr	r3, [pc, #60]	; (13b8 <system_clock_source_get_hz+0x8c>)
    137c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    137e:	4b0a      	ldr	r3, [pc, #40]	; (13a8 <system_clock_source_get_hz+0x7c>)
    1380:	689b      	ldr	r3, [r3, #8]
    1382:	041b      	lsls	r3, r3, #16
    1384:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1386:	4358      	muls	r0, r3
    1388:	e00a      	b.n	13a0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    138a:	2350      	movs	r3, #80	; 0x50
    138c:	4a07      	ldr	r2, [pc, #28]	; (13ac <system_clock_source_get_hz+0x80>)
    138e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1390:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1392:	075b      	lsls	r3, r3, #29
    1394:	d504      	bpl.n	13a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1396:	4b04      	ldr	r3, [pc, #16]	; (13a8 <system_clock_source_get_hz+0x7c>)
    1398:	68d8      	ldr	r0, [r3, #12]
    139a:	e001      	b.n	13a0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    139c:	2080      	movs	r0, #128	; 0x80
    139e:	0200      	lsls	r0, r0, #8
	}
}
    13a0:	bd10      	pop	{r4, pc}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	00001bb4 	.word	0x00001bb4
    13a8:	20000090 	.word	0x20000090
    13ac:	40000800 	.word	0x40000800
    13b0:	007a1200 	.word	0x007a1200
    13b4:	02dc6c00 	.word	0x02dc6c00
    13b8:	0000178d 	.word	0x0000178d

000013bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    13bc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    13be:	490c      	ldr	r1, [pc, #48]	; (13f0 <system_clock_source_osc8m_set_config+0x34>)
    13c0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    13c2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    13c4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    13c6:	7840      	ldrb	r0, [r0, #1]
    13c8:	2201      	movs	r2, #1
    13ca:	4010      	ands	r0, r2
    13cc:	0180      	lsls	r0, r0, #6
    13ce:	2640      	movs	r6, #64	; 0x40
    13d0:	43b3      	bics	r3, r6
    13d2:	4303      	orrs	r3, r0
    13d4:	402a      	ands	r2, r5
    13d6:	01d2      	lsls	r2, r2, #7
    13d8:	2080      	movs	r0, #128	; 0x80
    13da:	4383      	bics	r3, r0
    13dc:	4313      	orrs	r3, r2
    13de:	2203      	movs	r2, #3
    13e0:	4022      	ands	r2, r4
    13e2:	0212      	lsls	r2, r2, #8
    13e4:	4803      	ldr	r0, [pc, #12]	; (13f4 <system_clock_source_osc8m_set_config+0x38>)
    13e6:	4003      	ands	r3, r0
    13e8:	4313      	orrs	r3, r2
    13ea:	620b      	str	r3, [r1, #32]
}
    13ec:	bd70      	pop	{r4, r5, r6, pc}
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	40000800 	.word	0x40000800
    13f4:	fffffcff 	.word	0xfffffcff

000013f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    13f8:	2808      	cmp	r0, #8
    13fa:	d803      	bhi.n	1404 <system_clock_source_enable+0xc>
    13fc:	0080      	lsls	r0, r0, #2
    13fe:	4b25      	ldr	r3, [pc, #148]	; (1494 <system_clock_source_enable+0x9c>)
    1400:	581b      	ldr	r3, [r3, r0]
    1402:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1404:	2017      	movs	r0, #23
    1406:	e044      	b.n	1492 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1408:	4a23      	ldr	r2, [pc, #140]	; (1498 <system_clock_source_enable+0xa0>)
    140a:	6a13      	ldr	r3, [r2, #32]
    140c:	2102      	movs	r1, #2
    140e:	430b      	orrs	r3, r1
    1410:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1412:	2000      	movs	r0, #0
    1414:	e03d      	b.n	1492 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1416:	4a20      	ldr	r2, [pc, #128]	; (1498 <system_clock_source_enable+0xa0>)
    1418:	6993      	ldr	r3, [r2, #24]
    141a:	2102      	movs	r1, #2
    141c:	430b      	orrs	r3, r1
    141e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1420:	2000      	movs	r0, #0
		break;
    1422:	e036      	b.n	1492 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1424:	4a1c      	ldr	r2, [pc, #112]	; (1498 <system_clock_source_enable+0xa0>)
    1426:	8a13      	ldrh	r3, [r2, #16]
    1428:	2102      	movs	r1, #2
    142a:	430b      	orrs	r3, r1
    142c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    142e:	2000      	movs	r0, #0
		break;
    1430:	e02f      	b.n	1492 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1432:	4a19      	ldr	r2, [pc, #100]	; (1498 <system_clock_source_enable+0xa0>)
    1434:	8a93      	ldrh	r3, [r2, #20]
    1436:	2102      	movs	r1, #2
    1438:	430b      	orrs	r3, r1
    143a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    143c:	2000      	movs	r0, #0
		break;
    143e:	e028      	b.n	1492 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1440:	4916      	ldr	r1, [pc, #88]	; (149c <system_clock_source_enable+0xa4>)
    1442:	680b      	ldr	r3, [r1, #0]
    1444:	2202      	movs	r2, #2
    1446:	4313      	orrs	r3, r2
    1448:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    144a:	4b13      	ldr	r3, [pc, #76]	; (1498 <system_clock_source_enable+0xa0>)
    144c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    144e:	0019      	movs	r1, r3
    1450:	320e      	adds	r2, #14
    1452:	68cb      	ldr	r3, [r1, #12]
    1454:	421a      	tst	r2, r3
    1456:	d0fc      	beq.n	1452 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1458:	4a10      	ldr	r2, [pc, #64]	; (149c <system_clock_source_enable+0xa4>)
    145a:	6891      	ldr	r1, [r2, #8]
    145c:	4b0e      	ldr	r3, [pc, #56]	; (1498 <system_clock_source_enable+0xa0>)
    145e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1460:	6852      	ldr	r2, [r2, #4]
    1462:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1464:	2200      	movs	r2, #0
    1466:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1468:	0019      	movs	r1, r3
    146a:	3210      	adds	r2, #16
    146c:	68cb      	ldr	r3, [r1, #12]
    146e:	421a      	tst	r2, r3
    1470:	d0fc      	beq.n	146c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1472:	4b0a      	ldr	r3, [pc, #40]	; (149c <system_clock_source_enable+0xa4>)
    1474:	681b      	ldr	r3, [r3, #0]
    1476:	b29b      	uxth	r3, r3
    1478:	4a07      	ldr	r2, [pc, #28]	; (1498 <system_clock_source_enable+0xa0>)
    147a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    147c:	2000      	movs	r0, #0
    147e:	e008      	b.n	1492 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1480:	4905      	ldr	r1, [pc, #20]	; (1498 <system_clock_source_enable+0xa0>)
    1482:	2244      	movs	r2, #68	; 0x44
    1484:	5c8b      	ldrb	r3, [r1, r2]
    1486:	2002      	movs	r0, #2
    1488:	4303      	orrs	r3, r0
    148a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    148c:	2000      	movs	r0, #0
		break;
    148e:	e000      	b.n	1492 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1490:	2000      	movs	r0, #0
}
    1492:	4770      	bx	lr
    1494:	00001bd8 	.word	0x00001bd8
    1498:	40000800 	.word	0x40000800
    149c:	20000090 	.word	0x20000090

000014a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    14a0:	b530      	push	{r4, r5, lr}
    14a2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    14a4:	22c2      	movs	r2, #194	; 0xc2
    14a6:	00d2      	lsls	r2, r2, #3
    14a8:	4b1a      	ldr	r3, [pc, #104]	; (1514 <system_clock_init+0x74>)
    14aa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    14ac:	4a1a      	ldr	r2, [pc, #104]	; (1518 <system_clock_init+0x78>)
    14ae:	6853      	ldr	r3, [r2, #4]
    14b0:	211e      	movs	r1, #30
    14b2:	438b      	bics	r3, r1
    14b4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    14b6:	2301      	movs	r3, #1
    14b8:	466a      	mov	r2, sp
    14ba:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    14bc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    14be:	4d17      	ldr	r5, [pc, #92]	; (151c <system_clock_init+0x7c>)
    14c0:	b2e0      	uxtb	r0, r4
    14c2:	4669      	mov	r1, sp
    14c4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    14c6:	3401      	adds	r4, #1
    14c8:	2c18      	cmp	r4, #24
    14ca:	d1f9      	bne.n	14c0 <system_clock_init+0x20>
	config->run_in_standby  = false;
    14cc:	a803      	add	r0, sp, #12
    14ce:	2400      	movs	r4, #0
    14d0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    14d2:	2501      	movs	r5, #1
    14d4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    14d6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    14d8:	4b11      	ldr	r3, [pc, #68]	; (1520 <system_clock_init+0x80>)
    14da:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    14dc:	2006      	movs	r0, #6
    14de:	4b11      	ldr	r3, [pc, #68]	; (1524 <system_clock_init+0x84>)
    14e0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    14e2:	4b11      	ldr	r3, [pc, #68]	; (1528 <system_clock_init+0x88>)
    14e4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    14e6:	4b11      	ldr	r3, [pc, #68]	; (152c <system_clock_init+0x8c>)
    14e8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    14ea:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    14ec:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    14ee:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    14f0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    14f2:	466b      	mov	r3, sp
    14f4:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14f6:	2306      	movs	r3, #6
    14f8:	466a      	mov	r2, sp
    14fa:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    14fc:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    14fe:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1500:	4669      	mov	r1, sp
    1502:	2000      	movs	r0, #0
    1504:	4b0a      	ldr	r3, [pc, #40]	; (1530 <system_clock_init+0x90>)
    1506:	4798      	blx	r3
    1508:	2000      	movs	r0, #0
    150a:	4b0a      	ldr	r3, [pc, #40]	; (1534 <system_clock_init+0x94>)
    150c:	4798      	blx	r3
#endif
}
    150e:	b005      	add	sp, #20
    1510:	bd30      	pop	{r4, r5, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	40000800 	.word	0x40000800
    1518:	41004000 	.word	0x41004000
    151c:	00001771 	.word	0x00001771
    1520:	000013bd 	.word	0x000013bd
    1524:	000013f9 	.word	0x000013f9
    1528:	00001539 	.word	0x00001539
    152c:	40000400 	.word	0x40000400
    1530:	0000155d 	.word	0x0000155d
    1534:	00001615 	.word	0x00001615

00001538 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1538:	4a06      	ldr	r2, [pc, #24]	; (1554 <system_gclk_init+0x1c>)
    153a:	6993      	ldr	r3, [r2, #24]
    153c:	2108      	movs	r1, #8
    153e:	430b      	orrs	r3, r1
    1540:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1542:	2201      	movs	r2, #1
    1544:	4b04      	ldr	r3, [pc, #16]	; (1558 <system_gclk_init+0x20>)
    1546:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1548:	0019      	movs	r1, r3
    154a:	780b      	ldrb	r3, [r1, #0]
    154c:	4213      	tst	r3, r2
    154e:	d1fc      	bne.n	154a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1550:	4770      	bx	lr
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	40000400 	.word	0x40000400
    1558:	40000c00 	.word	0x40000c00

0000155c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    155c:	b570      	push	{r4, r5, r6, lr}
    155e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1560:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1562:	780d      	ldrb	r5, [r1, #0]
    1564:	022d      	lsls	r5, r5, #8
    1566:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1568:	784b      	ldrb	r3, [r1, #1]
    156a:	2b00      	cmp	r3, #0
    156c:	d002      	beq.n	1574 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    156e:	2380      	movs	r3, #128	; 0x80
    1570:	02db      	lsls	r3, r3, #11
    1572:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1574:	7a4b      	ldrb	r3, [r1, #9]
    1576:	2b00      	cmp	r3, #0
    1578:	d002      	beq.n	1580 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    157a:	2380      	movs	r3, #128	; 0x80
    157c:	031b      	lsls	r3, r3, #12
    157e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1580:	6848      	ldr	r0, [r1, #4]
    1582:	2801      	cmp	r0, #1
    1584:	d910      	bls.n	15a8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1586:	1e43      	subs	r3, r0, #1
    1588:	4218      	tst	r0, r3
    158a:	d134      	bne.n	15f6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    158c:	2802      	cmp	r0, #2
    158e:	d930      	bls.n	15f2 <system_gclk_gen_set_config+0x96>
    1590:	2302      	movs	r3, #2
    1592:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1594:	3201      	adds	r2, #1
						mask <<= 1) {
    1596:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1598:	4298      	cmp	r0, r3
    159a:	d8fb      	bhi.n	1594 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    159c:	0212      	lsls	r2, r2, #8
    159e:	4332      	orrs	r2, r6
    15a0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    15a2:	2380      	movs	r3, #128	; 0x80
    15a4:	035b      	lsls	r3, r3, #13
    15a6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15a8:	7a0b      	ldrb	r3, [r1, #8]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d002      	beq.n	15b4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15ae:	2380      	movs	r3, #128	; 0x80
    15b0:	039b      	lsls	r3, r3, #14
    15b2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15b4:	4a13      	ldr	r2, [pc, #76]	; (1604 <system_gclk_gen_set_config+0xa8>)
    15b6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    15b8:	b25b      	sxtb	r3, r3
    15ba:	2b00      	cmp	r3, #0
    15bc:	dbfb      	blt.n	15b6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    15be:	4b12      	ldr	r3, [pc, #72]	; (1608 <system_gclk_gen_set_config+0xac>)
    15c0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15c2:	4b12      	ldr	r3, [pc, #72]	; (160c <system_gclk_gen_set_config+0xb0>)
    15c4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15c6:	4a0f      	ldr	r2, [pc, #60]	; (1604 <system_gclk_gen_set_config+0xa8>)
    15c8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    15ca:	b25b      	sxtb	r3, r3
    15cc:	2b00      	cmp	r3, #0
    15ce:	dbfb      	blt.n	15c8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15d0:	4b0c      	ldr	r3, [pc, #48]	; (1604 <system_gclk_gen_set_config+0xa8>)
    15d2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15d4:	001a      	movs	r2, r3
    15d6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    15d8:	b25b      	sxtb	r3, r3
    15da:	2b00      	cmp	r3, #0
    15dc:	dbfb      	blt.n	15d6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    15de:	4a09      	ldr	r2, [pc, #36]	; (1604 <system_gclk_gen_set_config+0xa8>)
    15e0:	6853      	ldr	r3, [r2, #4]
    15e2:	2180      	movs	r1, #128	; 0x80
    15e4:	0249      	lsls	r1, r1, #9
    15e6:	400b      	ands	r3, r1
    15e8:	431d      	orrs	r5, r3
    15ea:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    15ec:	4b08      	ldr	r3, [pc, #32]	; (1610 <system_gclk_gen_set_config+0xb4>)
    15ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15f0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    15f2:	2200      	movs	r2, #0
    15f4:	e7d2      	b.n	159c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    15f6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    15f8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15fa:	2380      	movs	r3, #128	; 0x80
    15fc:	029b      	lsls	r3, r3, #10
    15fe:	431d      	orrs	r5, r3
    1600:	e7d2      	b.n	15a8 <system_gclk_gen_set_config+0x4c>
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	40000c00 	.word	0x40000c00
    1608:	000012bd 	.word	0x000012bd
    160c:	40000c08 	.word	0x40000c08
    1610:	000012fd 	.word	0x000012fd

00001614 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1614:	b510      	push	{r4, lr}
    1616:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1618:	4a0b      	ldr	r2, [pc, #44]	; (1648 <system_gclk_gen_enable+0x34>)
    161a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    161c:	b25b      	sxtb	r3, r3
    161e:	2b00      	cmp	r3, #0
    1620:	dbfb      	blt.n	161a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1622:	4b0a      	ldr	r3, [pc, #40]	; (164c <system_gclk_gen_enable+0x38>)
    1624:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1626:	4b0a      	ldr	r3, [pc, #40]	; (1650 <system_gclk_gen_enable+0x3c>)
    1628:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    162a:	4a07      	ldr	r2, [pc, #28]	; (1648 <system_gclk_gen_enable+0x34>)
    162c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    162e:	b25b      	sxtb	r3, r3
    1630:	2b00      	cmp	r3, #0
    1632:	dbfb      	blt.n	162c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1634:	4a04      	ldr	r2, [pc, #16]	; (1648 <system_gclk_gen_enable+0x34>)
    1636:	6851      	ldr	r1, [r2, #4]
    1638:	2380      	movs	r3, #128	; 0x80
    163a:	025b      	lsls	r3, r3, #9
    163c:	430b      	orrs	r3, r1
    163e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1640:	4b04      	ldr	r3, [pc, #16]	; (1654 <system_gclk_gen_enable+0x40>)
    1642:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1644:	bd10      	pop	{r4, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	40000c00 	.word	0x40000c00
    164c:	000012bd 	.word	0x000012bd
    1650:	40000c04 	.word	0x40000c04
    1654:	000012fd 	.word	0x000012fd

00001658 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1658:	b570      	push	{r4, r5, r6, lr}
    165a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    165c:	4a1a      	ldr	r2, [pc, #104]	; (16c8 <system_gclk_gen_get_hz+0x70>)
    165e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1660:	b25b      	sxtb	r3, r3
    1662:	2b00      	cmp	r3, #0
    1664:	dbfb      	blt.n	165e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1666:	4b19      	ldr	r3, [pc, #100]	; (16cc <system_gclk_gen_get_hz+0x74>)
    1668:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    166a:	4b19      	ldr	r3, [pc, #100]	; (16d0 <system_gclk_gen_get_hz+0x78>)
    166c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    166e:	4a16      	ldr	r2, [pc, #88]	; (16c8 <system_gclk_gen_get_hz+0x70>)
    1670:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1672:	b25b      	sxtb	r3, r3
    1674:	2b00      	cmp	r3, #0
    1676:	dbfb      	blt.n	1670 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1678:	4e13      	ldr	r6, [pc, #76]	; (16c8 <system_gclk_gen_get_hz+0x70>)
    167a:	6870      	ldr	r0, [r6, #4]
    167c:	04c0      	lsls	r0, r0, #19
    167e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1680:	4b14      	ldr	r3, [pc, #80]	; (16d4 <system_gclk_gen_get_hz+0x7c>)
    1682:	4798      	blx	r3
    1684:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1686:	4b12      	ldr	r3, [pc, #72]	; (16d0 <system_gclk_gen_get_hz+0x78>)
    1688:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    168a:	6876      	ldr	r6, [r6, #4]
    168c:	02f6      	lsls	r6, r6, #11
    168e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1690:	4b11      	ldr	r3, [pc, #68]	; (16d8 <system_gclk_gen_get_hz+0x80>)
    1692:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1694:	4a0c      	ldr	r2, [pc, #48]	; (16c8 <system_gclk_gen_get_hz+0x70>)
    1696:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1698:	b25b      	sxtb	r3, r3
    169a:	2b00      	cmp	r3, #0
    169c:	dbfb      	blt.n	1696 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    169e:	4b0a      	ldr	r3, [pc, #40]	; (16c8 <system_gclk_gen_get_hz+0x70>)
    16a0:	689c      	ldr	r4, [r3, #8]
    16a2:	0224      	lsls	r4, r4, #8
    16a4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    16a6:	4b0d      	ldr	r3, [pc, #52]	; (16dc <system_gclk_gen_get_hz+0x84>)
    16a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16aa:	2e00      	cmp	r6, #0
    16ac:	d107      	bne.n	16be <system_gclk_gen_get_hz+0x66>
    16ae:	2c01      	cmp	r4, #1
    16b0:	d907      	bls.n	16c2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16b2:	0021      	movs	r1, r4
    16b4:	0028      	movs	r0, r5
    16b6:	4b0a      	ldr	r3, [pc, #40]	; (16e0 <system_gclk_gen_get_hz+0x88>)
    16b8:	4798      	blx	r3
    16ba:	0005      	movs	r5, r0
    16bc:	e001      	b.n	16c2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16be:	3401      	adds	r4, #1
    16c0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16c2:	0028      	movs	r0, r5
    16c4:	bd70      	pop	{r4, r5, r6, pc}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	40000c00 	.word	0x40000c00
    16cc:	000012bd 	.word	0x000012bd
    16d0:	40000c04 	.word	0x40000c04
    16d4:	0000132d 	.word	0x0000132d
    16d8:	40000c08 	.word	0x40000c08
    16dc:	000012fd 	.word	0x000012fd
    16e0:	00001a1d 	.word	0x00001a1d

000016e4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    16e4:	b510      	push	{r4, lr}
    16e6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16e8:	4b06      	ldr	r3, [pc, #24]	; (1704 <system_gclk_chan_enable+0x20>)
    16ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16ec:	4b06      	ldr	r3, [pc, #24]	; (1708 <system_gclk_chan_enable+0x24>)
    16ee:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    16f0:	4a06      	ldr	r2, [pc, #24]	; (170c <system_gclk_chan_enable+0x28>)
    16f2:	8853      	ldrh	r3, [r2, #2]
    16f4:	2180      	movs	r1, #128	; 0x80
    16f6:	01c9      	lsls	r1, r1, #7
    16f8:	430b      	orrs	r3, r1
    16fa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    16fc:	4b04      	ldr	r3, [pc, #16]	; (1710 <system_gclk_chan_enable+0x2c>)
    16fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1700:	bd10      	pop	{r4, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	000012bd 	.word	0x000012bd
    1708:	40000c02 	.word	0x40000c02
    170c:	40000c00 	.word	0x40000c00
    1710:	000012fd 	.word	0x000012fd

00001714 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1714:	b510      	push	{r4, lr}
    1716:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1718:	4b0f      	ldr	r3, [pc, #60]	; (1758 <system_gclk_chan_disable+0x44>)
    171a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    171c:	4b0f      	ldr	r3, [pc, #60]	; (175c <system_gclk_chan_disable+0x48>)
    171e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1720:	4a0f      	ldr	r2, [pc, #60]	; (1760 <system_gclk_chan_disable+0x4c>)
    1722:	8853      	ldrh	r3, [r2, #2]
    1724:	051b      	lsls	r3, r3, #20
    1726:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1728:	8853      	ldrh	r3, [r2, #2]
    172a:	490e      	ldr	r1, [pc, #56]	; (1764 <system_gclk_chan_disable+0x50>)
    172c:	400b      	ands	r3, r1
    172e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1730:	8853      	ldrh	r3, [r2, #2]
    1732:	490d      	ldr	r1, [pc, #52]	; (1768 <system_gclk_chan_disable+0x54>)
    1734:	400b      	ands	r3, r1
    1736:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1738:	0011      	movs	r1, r2
    173a:	2280      	movs	r2, #128	; 0x80
    173c:	01d2      	lsls	r2, r2, #7
    173e:	884b      	ldrh	r3, [r1, #2]
    1740:	4213      	tst	r3, r2
    1742:	d1fc      	bne.n	173e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1744:	4906      	ldr	r1, [pc, #24]	; (1760 <system_gclk_chan_disable+0x4c>)
    1746:	884a      	ldrh	r2, [r1, #2]
    1748:	0203      	lsls	r3, r0, #8
    174a:	4806      	ldr	r0, [pc, #24]	; (1764 <system_gclk_chan_disable+0x50>)
    174c:	4002      	ands	r2, r0
    174e:	4313      	orrs	r3, r2
    1750:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1752:	4b06      	ldr	r3, [pc, #24]	; (176c <system_gclk_chan_disable+0x58>)
    1754:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1756:	bd10      	pop	{r4, pc}
    1758:	000012bd 	.word	0x000012bd
    175c:	40000c02 	.word	0x40000c02
    1760:	40000c00 	.word	0x40000c00
    1764:	fffff0ff 	.word	0xfffff0ff
    1768:	ffffbfff 	.word	0xffffbfff
    176c:	000012fd 	.word	0x000012fd

00001770 <system_gclk_chan_set_config>:
{
    1770:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1772:	780c      	ldrb	r4, [r1, #0]
    1774:	0224      	lsls	r4, r4, #8
    1776:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1778:	4b02      	ldr	r3, [pc, #8]	; (1784 <system_gclk_chan_set_config+0x14>)
    177a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    177c:	b2a4      	uxth	r4, r4
    177e:	4b02      	ldr	r3, [pc, #8]	; (1788 <system_gclk_chan_set_config+0x18>)
    1780:	805c      	strh	r4, [r3, #2]
}
    1782:	bd10      	pop	{r4, pc}
    1784:	00001715 	.word	0x00001715
    1788:	40000c00 	.word	0x40000c00

0000178c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    178c:	b510      	push	{r4, lr}
    178e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1790:	4b06      	ldr	r3, [pc, #24]	; (17ac <system_gclk_chan_get_hz+0x20>)
    1792:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1794:	4b06      	ldr	r3, [pc, #24]	; (17b0 <system_gclk_chan_get_hz+0x24>)
    1796:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1798:	4b06      	ldr	r3, [pc, #24]	; (17b4 <system_gclk_chan_get_hz+0x28>)
    179a:	885c      	ldrh	r4, [r3, #2]
    179c:	0524      	lsls	r4, r4, #20
    179e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    17a0:	4b05      	ldr	r3, [pc, #20]	; (17b8 <system_gclk_chan_get_hz+0x2c>)
    17a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    17a4:	0020      	movs	r0, r4
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <system_gclk_chan_get_hz+0x30>)
    17a8:	4798      	blx	r3
}
    17aa:	bd10      	pop	{r4, pc}
    17ac:	000012bd 	.word	0x000012bd
    17b0:	40000c02 	.word	0x40000c02
    17b4:	40000c00 	.word	0x40000c00
    17b8:	000012fd 	.word	0x000012fd
    17bc:	00001659 	.word	0x00001659

000017c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17c2:	78d3      	ldrb	r3, [r2, #3]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d135      	bne.n	1834 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    17c8:	7813      	ldrb	r3, [r2, #0]
    17ca:	2b80      	cmp	r3, #128	; 0x80
    17cc:	d029      	beq.n	1822 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    17ce:	061b      	lsls	r3, r3, #24
    17d0:	2480      	movs	r4, #128	; 0x80
    17d2:	0264      	lsls	r4, r4, #9
    17d4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17d6:	7854      	ldrb	r4, [r2, #1]
    17d8:	2502      	movs	r5, #2
    17da:	43ac      	bics	r4, r5
    17dc:	d106      	bne.n	17ec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    17de:	7894      	ldrb	r4, [r2, #2]
    17e0:	2c00      	cmp	r4, #0
    17e2:	d120      	bne.n	1826 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    17e4:	2480      	movs	r4, #128	; 0x80
    17e6:	02a4      	lsls	r4, r4, #10
    17e8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    17ea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17ec:	7854      	ldrb	r4, [r2, #1]
    17ee:	3c01      	subs	r4, #1
    17f0:	2c01      	cmp	r4, #1
    17f2:	d91c      	bls.n	182e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17f4:	040d      	lsls	r5, r1, #16
    17f6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17f8:	24a0      	movs	r4, #160	; 0xa0
    17fa:	05e4      	lsls	r4, r4, #23
    17fc:	432c      	orrs	r4, r5
    17fe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1800:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1802:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1804:	24d0      	movs	r4, #208	; 0xd0
    1806:	0624      	lsls	r4, r4, #24
    1808:	432c      	orrs	r4, r5
    180a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    180c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    180e:	78d4      	ldrb	r4, [r2, #3]
    1810:	2c00      	cmp	r4, #0
    1812:	d122      	bne.n	185a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1814:	035b      	lsls	r3, r3, #13
    1816:	d51c      	bpl.n	1852 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1818:	7893      	ldrb	r3, [r2, #2]
    181a:	2b01      	cmp	r3, #1
    181c:	d01e      	beq.n	185c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    181e:	6141      	str	r1, [r0, #20]
    1820:	e017      	b.n	1852 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1822:	2300      	movs	r3, #0
    1824:	e7d7      	b.n	17d6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1826:	24c0      	movs	r4, #192	; 0xc0
    1828:	02e4      	lsls	r4, r4, #11
    182a:	4323      	orrs	r3, r4
    182c:	e7dd      	b.n	17ea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    182e:	4c0d      	ldr	r4, [pc, #52]	; (1864 <_system_pinmux_config+0xa4>)
    1830:	4023      	ands	r3, r4
    1832:	e7df      	b.n	17f4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1834:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1836:	040c      	lsls	r4, r1, #16
    1838:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    183a:	23a0      	movs	r3, #160	; 0xa0
    183c:	05db      	lsls	r3, r3, #23
    183e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1840:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1842:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1844:	23d0      	movs	r3, #208	; 0xd0
    1846:	061b      	lsls	r3, r3, #24
    1848:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    184a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    184c:	78d3      	ldrb	r3, [r2, #3]
    184e:	2b00      	cmp	r3, #0
    1850:	d103      	bne.n	185a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1852:	7853      	ldrb	r3, [r2, #1]
    1854:	3b01      	subs	r3, #1
    1856:	2b01      	cmp	r3, #1
    1858:	d902      	bls.n	1860 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    185a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    185c:	6181      	str	r1, [r0, #24]
    185e:	e7f8      	b.n	1852 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1860:	6081      	str	r1, [r0, #8]
}
    1862:	e7fa      	b.n	185a <_system_pinmux_config+0x9a>
    1864:	fffbffff 	.word	0xfffbffff

00001868 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1868:	b510      	push	{r4, lr}
    186a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    186c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    186e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1870:	2900      	cmp	r1, #0
    1872:	d104      	bne.n	187e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1874:	0943      	lsrs	r3, r0, #5
    1876:	01db      	lsls	r3, r3, #7
    1878:	4905      	ldr	r1, [pc, #20]	; (1890 <system_pinmux_pin_set_config+0x28>)
    187a:	468c      	mov	ip, r1
    187c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    187e:	241f      	movs	r4, #31
    1880:	4020      	ands	r0, r4
    1882:	2101      	movs	r1, #1
    1884:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1886:	0018      	movs	r0, r3
    1888:	4b02      	ldr	r3, [pc, #8]	; (1894 <system_pinmux_pin_set_config+0x2c>)
    188a:	4798      	blx	r3
}
    188c:	bd10      	pop	{r4, pc}
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	41004400 	.word	0x41004400
    1894:	000017c1 	.word	0x000017c1

00001898 <system_pinmux_group_set_output_strength>:
 */
void system_pinmux_group_set_output_strength(
		PortGroup *const port,
		const uint32_t mask,
		const enum system_pinmux_pin_strength mode)
{
    1898:	b5f0      	push	{r4, r5, r6, r7, lr}
    189a:	46c6      	mov	lr, r8
    189c:	b500      	push	{lr}
	Assert(port);

	for (int i = 0; i < 32; i++) {
    189e:	2300      	movs	r3, #0
		if (mask & (1UL << i)) {
    18a0:	2601      	movs	r6, #1
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
			} else {
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    18a2:	2440      	movs	r4, #64	; 0x40
    18a4:	46a0      	mov	r8, r4
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
    18a6:	46a4      	mov	ip, r4
    18a8:	e009      	b.n	18be <system_pinmux_group_set_output_strength+0x26>
    18aa:	18c5      	adds	r5, r0, r3
    18ac:	3540      	adds	r5, #64	; 0x40
    18ae:	782c      	ldrb	r4, [r5, #0]
    18b0:	4667      	mov	r7, ip
    18b2:	433c      	orrs	r4, r7
    18b4:	b2e4      	uxtb	r4, r4
    18b6:	702c      	strb	r4, [r5, #0]
	for (int i = 0; i < 32; i++) {
    18b8:	3301      	adds	r3, #1
    18ba:	2b20      	cmp	r3, #32
    18bc:	d00c      	beq.n	18d8 <system_pinmux_group_set_output_strength+0x40>
		if (mask & (1UL << i)) {
    18be:	000c      	movs	r4, r1
    18c0:	40dc      	lsrs	r4, r3
    18c2:	4226      	tst	r6, r4
    18c4:	d0f8      	beq.n	18b8 <system_pinmux_group_set_output_strength+0x20>
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    18c6:	2a01      	cmp	r2, #1
    18c8:	d0ef      	beq.n	18aa <system_pinmux_group_set_output_strength+0x12>
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    18ca:	18c4      	adds	r4, r0, r3
    18cc:	3440      	adds	r4, #64	; 0x40
    18ce:	7825      	ldrb	r5, [r4, #0]
    18d0:	4647      	mov	r7, r8
    18d2:	43bd      	bics	r5, r7
    18d4:	7025      	strb	r5, [r4, #0]
    18d6:	e7ef      	b.n	18b8 <system_pinmux_group_set_output_strength+0x20>
			}
		}
	}
}
    18d8:	bc04      	pop	{r2}
    18da:	4690      	mov	r8, r2
    18dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018de <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    18de:	4770      	bx	lr

000018e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    18e0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    18e2:	4b05      	ldr	r3, [pc, #20]	; (18f8 <system_init+0x18>)
    18e4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    18e6:	4b05      	ldr	r3, [pc, #20]	; (18fc <system_init+0x1c>)
    18e8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    18ea:	4b05      	ldr	r3, [pc, #20]	; (1900 <system_init+0x20>)
    18ec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <system_init+0x24>)
    18f0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18f2:	4b05      	ldr	r3, [pc, #20]	; (1908 <system_init+0x28>)
    18f4:	4798      	blx	r3
}
    18f6:	bd10      	pop	{r4, pc}
    18f8:	000014a1 	.word	0x000014a1
    18fc:	000012b9 	.word	0x000012b9
    1900:	000018df 	.word	0x000018df
    1904:	00000631 	.word	0x00000631
    1908:	000018df 	.word	0x000018df

0000190c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    190c:	e7fe      	b.n	190c <Dummy_Handler>
	...

00001910 <Reset_Handler>:
{
    1910:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1912:	4a26      	ldr	r2, [pc, #152]	; (19ac <Reset_Handler+0x9c>)
    1914:	4b26      	ldr	r3, [pc, #152]	; (19b0 <Reset_Handler+0xa0>)
    1916:	429a      	cmp	r2, r3
    1918:	d011      	beq.n	193e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    191a:	001a      	movs	r2, r3
    191c:	4b25      	ldr	r3, [pc, #148]	; (19b4 <Reset_Handler+0xa4>)
    191e:	429a      	cmp	r2, r3
    1920:	d20d      	bcs.n	193e <Reset_Handler+0x2e>
    1922:	4a25      	ldr	r2, [pc, #148]	; (19b8 <Reset_Handler+0xa8>)
    1924:	3303      	adds	r3, #3
    1926:	1a9b      	subs	r3, r3, r2
    1928:	089b      	lsrs	r3, r3, #2
    192a:	3301      	adds	r3, #1
    192c:	009b      	lsls	r3, r3, #2
    192e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1930:	481f      	ldr	r0, [pc, #124]	; (19b0 <Reset_Handler+0xa0>)
    1932:	491e      	ldr	r1, [pc, #120]	; (19ac <Reset_Handler+0x9c>)
    1934:	588c      	ldr	r4, [r1, r2]
    1936:	5084      	str	r4, [r0, r2]
    1938:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    193a:	429a      	cmp	r2, r3
    193c:	d1fa      	bne.n	1934 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    193e:	4a1f      	ldr	r2, [pc, #124]	; (19bc <Reset_Handler+0xac>)
    1940:	4b1f      	ldr	r3, [pc, #124]	; (19c0 <Reset_Handler+0xb0>)
    1942:	429a      	cmp	r2, r3
    1944:	d20a      	bcs.n	195c <Reset_Handler+0x4c>
    1946:	43d3      	mvns	r3, r2
    1948:	491d      	ldr	r1, [pc, #116]	; (19c0 <Reset_Handler+0xb0>)
    194a:	185b      	adds	r3, r3, r1
    194c:	2103      	movs	r1, #3
    194e:	438b      	bics	r3, r1
    1950:	3304      	adds	r3, #4
    1952:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1954:	2100      	movs	r1, #0
    1956:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1958:	4293      	cmp	r3, r2
    195a:	d1fc      	bne.n	1956 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    195c:	4a19      	ldr	r2, [pc, #100]	; (19c4 <Reset_Handler+0xb4>)
    195e:	21ff      	movs	r1, #255	; 0xff
    1960:	4b19      	ldr	r3, [pc, #100]	; (19c8 <Reset_Handler+0xb8>)
    1962:	438b      	bics	r3, r1
    1964:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1966:	39fd      	subs	r1, #253	; 0xfd
    1968:	2390      	movs	r3, #144	; 0x90
    196a:	005b      	lsls	r3, r3, #1
    196c:	4a17      	ldr	r2, [pc, #92]	; (19cc <Reset_Handler+0xbc>)
    196e:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1970:	4b17      	ldr	r3, [pc, #92]	; (19d0 <Reset_Handler+0xc0>)
    1972:	7b9a      	ldrb	r2, [r3, #14]
    1974:	312e      	adds	r1, #46	; 0x2e
    1976:	438a      	bics	r2, r1
    1978:	2120      	movs	r1, #32
    197a:	430a      	orrs	r2, r1
    197c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    197e:	7b9a      	ldrb	r2, [r3, #14]
    1980:	210c      	movs	r1, #12
    1982:	438a      	bics	r2, r1
    1984:	2108      	movs	r1, #8
    1986:	430a      	orrs	r2, r1
    1988:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    198a:	7b9a      	ldrb	r2, [r3, #14]
    198c:	2103      	movs	r1, #3
    198e:	438a      	bics	r2, r1
    1990:	2102      	movs	r1, #2
    1992:	430a      	orrs	r2, r1
    1994:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1996:	4a0f      	ldr	r2, [pc, #60]	; (19d4 <Reset_Handler+0xc4>)
    1998:	6853      	ldr	r3, [r2, #4]
    199a:	2180      	movs	r1, #128	; 0x80
    199c:	430b      	orrs	r3, r1
    199e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    19a0:	4b0d      	ldr	r3, [pc, #52]	; (19d8 <Reset_Handler+0xc8>)
    19a2:	4798      	blx	r3
        main();
    19a4:	4b0d      	ldr	r3, [pc, #52]	; (19dc <Reset_Handler+0xcc>)
    19a6:	4798      	blx	r3
    19a8:	e7fe      	b.n	19a8 <Reset_Handler+0x98>
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	00001c1c 	.word	0x00001c1c
    19b0:	20000000 	.word	0x20000000
    19b4:	20000010 	.word	0x20000010
    19b8:	20000004 	.word	0x20000004
    19bc:	20000010 	.word	0x20000010
    19c0:	2000012c 	.word	0x2000012c
    19c4:	e000ed00 	.word	0xe000ed00
    19c8:	00000000 	.word	0x00000000
    19cc:	41007000 	.word	0x41007000
    19d0:	41004800 	.word	0x41004800
    19d4:	41004000 	.word	0x41004000
    19d8:	00001b35 	.word	0x00001b35
    19dc:	000019e1 	.word	0x000019e1

000019e0 <main>:
volatile uint8_t temp_compare_array[3];

volatile bool lock_temp_array = false;

int main (void)
{
    19e0:	b510      	push	{r4, lr}
	system_init();
    19e2:	4b07      	ldr	r3, [pc, #28]	; (1a00 <main+0x20>)
    19e4:	4798      	blx	r3
	power_button_init();
    19e6:	4b07      	ldr	r3, [pc, #28]	; (1a04 <main+0x24>)
    19e8:	4798      	blx	r3
	delay_init();
    19ea:	4b07      	ldr	r3, [pc, #28]	; (1a08 <main+0x28>)
    19ec:	4798      	blx	r3
	ORB_init();
    19ee:	4b07      	ldr	r3, [pc, #28]	; (1a0c <main+0x2c>)
    19f0:	4798      	blx	r3
	configure_motors();
    19f2:	4b07      	ldr	r3, [pc, #28]	; (1a10 <main+0x30>)
    19f4:	4798      	blx	r3
	enable_ORB();
    19f6:	4b07      	ldr	r3, [pc, #28]	; (1a14 <main+0x34>)
    19f8:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		//check_power_off_button();
		//test_RGB();
	    test_motors();
    19fa:	4c07      	ldr	r4, [pc, #28]	; (1a18 <main+0x38>)
    19fc:	47a0      	blx	r4
    19fe:	e7fd      	b.n	19fc <main+0x1c>
    1a00:	000018e1 	.word	0x000018e1
    1a04:	00000369 	.word	0x00000369
    1a08:	00001229 	.word	0x00001229
    1a0c:	000005cd 	.word	0x000005cd
    1a10:	00000315 	.word	0x00000315
    1a14:	00000525 	.word	0x00000525
    1a18:	000005f1 	.word	0x000005f1

00001a1c <__udivsi3>:
    1a1c:	2200      	movs	r2, #0
    1a1e:	0843      	lsrs	r3, r0, #1
    1a20:	428b      	cmp	r3, r1
    1a22:	d374      	bcc.n	1b0e <__udivsi3+0xf2>
    1a24:	0903      	lsrs	r3, r0, #4
    1a26:	428b      	cmp	r3, r1
    1a28:	d35f      	bcc.n	1aea <__udivsi3+0xce>
    1a2a:	0a03      	lsrs	r3, r0, #8
    1a2c:	428b      	cmp	r3, r1
    1a2e:	d344      	bcc.n	1aba <__udivsi3+0x9e>
    1a30:	0b03      	lsrs	r3, r0, #12
    1a32:	428b      	cmp	r3, r1
    1a34:	d328      	bcc.n	1a88 <__udivsi3+0x6c>
    1a36:	0c03      	lsrs	r3, r0, #16
    1a38:	428b      	cmp	r3, r1
    1a3a:	d30d      	bcc.n	1a58 <__udivsi3+0x3c>
    1a3c:	22ff      	movs	r2, #255	; 0xff
    1a3e:	0209      	lsls	r1, r1, #8
    1a40:	ba12      	rev	r2, r2
    1a42:	0c03      	lsrs	r3, r0, #16
    1a44:	428b      	cmp	r3, r1
    1a46:	d302      	bcc.n	1a4e <__udivsi3+0x32>
    1a48:	1212      	asrs	r2, r2, #8
    1a4a:	0209      	lsls	r1, r1, #8
    1a4c:	d065      	beq.n	1b1a <__udivsi3+0xfe>
    1a4e:	0b03      	lsrs	r3, r0, #12
    1a50:	428b      	cmp	r3, r1
    1a52:	d319      	bcc.n	1a88 <__udivsi3+0x6c>
    1a54:	e000      	b.n	1a58 <__udivsi3+0x3c>
    1a56:	0a09      	lsrs	r1, r1, #8
    1a58:	0bc3      	lsrs	r3, r0, #15
    1a5a:	428b      	cmp	r3, r1
    1a5c:	d301      	bcc.n	1a62 <__udivsi3+0x46>
    1a5e:	03cb      	lsls	r3, r1, #15
    1a60:	1ac0      	subs	r0, r0, r3
    1a62:	4152      	adcs	r2, r2
    1a64:	0b83      	lsrs	r3, r0, #14
    1a66:	428b      	cmp	r3, r1
    1a68:	d301      	bcc.n	1a6e <__udivsi3+0x52>
    1a6a:	038b      	lsls	r3, r1, #14
    1a6c:	1ac0      	subs	r0, r0, r3
    1a6e:	4152      	adcs	r2, r2
    1a70:	0b43      	lsrs	r3, r0, #13
    1a72:	428b      	cmp	r3, r1
    1a74:	d301      	bcc.n	1a7a <__udivsi3+0x5e>
    1a76:	034b      	lsls	r3, r1, #13
    1a78:	1ac0      	subs	r0, r0, r3
    1a7a:	4152      	adcs	r2, r2
    1a7c:	0b03      	lsrs	r3, r0, #12
    1a7e:	428b      	cmp	r3, r1
    1a80:	d301      	bcc.n	1a86 <__udivsi3+0x6a>
    1a82:	030b      	lsls	r3, r1, #12
    1a84:	1ac0      	subs	r0, r0, r3
    1a86:	4152      	adcs	r2, r2
    1a88:	0ac3      	lsrs	r3, r0, #11
    1a8a:	428b      	cmp	r3, r1
    1a8c:	d301      	bcc.n	1a92 <__udivsi3+0x76>
    1a8e:	02cb      	lsls	r3, r1, #11
    1a90:	1ac0      	subs	r0, r0, r3
    1a92:	4152      	adcs	r2, r2
    1a94:	0a83      	lsrs	r3, r0, #10
    1a96:	428b      	cmp	r3, r1
    1a98:	d301      	bcc.n	1a9e <__udivsi3+0x82>
    1a9a:	028b      	lsls	r3, r1, #10
    1a9c:	1ac0      	subs	r0, r0, r3
    1a9e:	4152      	adcs	r2, r2
    1aa0:	0a43      	lsrs	r3, r0, #9
    1aa2:	428b      	cmp	r3, r1
    1aa4:	d301      	bcc.n	1aaa <__udivsi3+0x8e>
    1aa6:	024b      	lsls	r3, r1, #9
    1aa8:	1ac0      	subs	r0, r0, r3
    1aaa:	4152      	adcs	r2, r2
    1aac:	0a03      	lsrs	r3, r0, #8
    1aae:	428b      	cmp	r3, r1
    1ab0:	d301      	bcc.n	1ab6 <__udivsi3+0x9a>
    1ab2:	020b      	lsls	r3, r1, #8
    1ab4:	1ac0      	subs	r0, r0, r3
    1ab6:	4152      	adcs	r2, r2
    1ab8:	d2cd      	bcs.n	1a56 <__udivsi3+0x3a>
    1aba:	09c3      	lsrs	r3, r0, #7
    1abc:	428b      	cmp	r3, r1
    1abe:	d301      	bcc.n	1ac4 <__udivsi3+0xa8>
    1ac0:	01cb      	lsls	r3, r1, #7
    1ac2:	1ac0      	subs	r0, r0, r3
    1ac4:	4152      	adcs	r2, r2
    1ac6:	0983      	lsrs	r3, r0, #6
    1ac8:	428b      	cmp	r3, r1
    1aca:	d301      	bcc.n	1ad0 <__udivsi3+0xb4>
    1acc:	018b      	lsls	r3, r1, #6
    1ace:	1ac0      	subs	r0, r0, r3
    1ad0:	4152      	adcs	r2, r2
    1ad2:	0943      	lsrs	r3, r0, #5
    1ad4:	428b      	cmp	r3, r1
    1ad6:	d301      	bcc.n	1adc <__udivsi3+0xc0>
    1ad8:	014b      	lsls	r3, r1, #5
    1ada:	1ac0      	subs	r0, r0, r3
    1adc:	4152      	adcs	r2, r2
    1ade:	0903      	lsrs	r3, r0, #4
    1ae0:	428b      	cmp	r3, r1
    1ae2:	d301      	bcc.n	1ae8 <__udivsi3+0xcc>
    1ae4:	010b      	lsls	r3, r1, #4
    1ae6:	1ac0      	subs	r0, r0, r3
    1ae8:	4152      	adcs	r2, r2
    1aea:	08c3      	lsrs	r3, r0, #3
    1aec:	428b      	cmp	r3, r1
    1aee:	d301      	bcc.n	1af4 <__udivsi3+0xd8>
    1af0:	00cb      	lsls	r3, r1, #3
    1af2:	1ac0      	subs	r0, r0, r3
    1af4:	4152      	adcs	r2, r2
    1af6:	0883      	lsrs	r3, r0, #2
    1af8:	428b      	cmp	r3, r1
    1afa:	d301      	bcc.n	1b00 <__udivsi3+0xe4>
    1afc:	008b      	lsls	r3, r1, #2
    1afe:	1ac0      	subs	r0, r0, r3
    1b00:	4152      	adcs	r2, r2
    1b02:	0843      	lsrs	r3, r0, #1
    1b04:	428b      	cmp	r3, r1
    1b06:	d301      	bcc.n	1b0c <__udivsi3+0xf0>
    1b08:	004b      	lsls	r3, r1, #1
    1b0a:	1ac0      	subs	r0, r0, r3
    1b0c:	4152      	adcs	r2, r2
    1b0e:	1a41      	subs	r1, r0, r1
    1b10:	d200      	bcs.n	1b14 <__udivsi3+0xf8>
    1b12:	4601      	mov	r1, r0
    1b14:	4152      	adcs	r2, r2
    1b16:	4610      	mov	r0, r2
    1b18:	4770      	bx	lr
    1b1a:	e7ff      	b.n	1b1c <__udivsi3+0x100>
    1b1c:	b501      	push	{r0, lr}
    1b1e:	2000      	movs	r0, #0
    1b20:	f000 f806 	bl	1b30 <__aeabi_idiv0>
    1b24:	bd02      	pop	{r1, pc}
    1b26:	46c0      	nop			; (mov r8, r8)

00001b28 <__aeabi_uidivmod>:
    1b28:	2900      	cmp	r1, #0
    1b2a:	d0f7      	beq.n	1b1c <__udivsi3+0x100>
    1b2c:	e776      	b.n	1a1c <__udivsi3>
    1b2e:	4770      	bx	lr

00001b30 <__aeabi_idiv0>:
    1b30:	4770      	bx	lr
    1b32:	46c0      	nop			; (mov r8, r8)

00001b34 <__libc_init_array>:
    1b34:	b570      	push	{r4, r5, r6, lr}
    1b36:	2600      	movs	r6, #0
    1b38:	4d0c      	ldr	r5, [pc, #48]	; (1b6c <__libc_init_array+0x38>)
    1b3a:	4c0d      	ldr	r4, [pc, #52]	; (1b70 <__libc_init_array+0x3c>)
    1b3c:	1b64      	subs	r4, r4, r5
    1b3e:	10a4      	asrs	r4, r4, #2
    1b40:	42a6      	cmp	r6, r4
    1b42:	d109      	bne.n	1b58 <__libc_init_array+0x24>
    1b44:	2600      	movs	r6, #0
    1b46:	f000 f859 	bl	1bfc <_init>
    1b4a:	4d0a      	ldr	r5, [pc, #40]	; (1b74 <__libc_init_array+0x40>)
    1b4c:	4c0a      	ldr	r4, [pc, #40]	; (1b78 <__libc_init_array+0x44>)
    1b4e:	1b64      	subs	r4, r4, r5
    1b50:	10a4      	asrs	r4, r4, #2
    1b52:	42a6      	cmp	r6, r4
    1b54:	d105      	bne.n	1b62 <__libc_init_array+0x2e>
    1b56:	bd70      	pop	{r4, r5, r6, pc}
    1b58:	00b3      	lsls	r3, r6, #2
    1b5a:	58eb      	ldr	r3, [r5, r3]
    1b5c:	4798      	blx	r3
    1b5e:	3601      	adds	r6, #1
    1b60:	e7ee      	b.n	1b40 <__libc_init_array+0xc>
    1b62:	00b3      	lsls	r3, r6, #2
    1b64:	58eb      	ldr	r3, [r5, r3]
    1b66:	4798      	blx	r3
    1b68:	3601      	adds	r6, #1
    1b6a:	e7f2      	b.n	1b52 <__libc_init_array+0x1e>
    1b6c:	00001c08 	.word	0x00001c08
    1b70:	00001c08 	.word	0x00001c08
    1b74:	00001c08 	.word	0x00001c08
    1b78:	00001c0c 	.word	0x00001c0c

00001b7c <tc_interrupt_vectors.12144>:
    1b7c:	00000e0d                                ....

00001b80 <_tcc_intflag>:
    1b80:	00000001 00000002 00000004 00000008     ................
    1b90:	00001000 00002000 00004000 00008000     ..... ...@......
    1ba0:	00010000 00020000 00040000 00080000     ................

00001bb0 <tc_interrupt_vectors.11123>:
    1bb0:	00000e0d 0000133e 0000133a 0000133a     ....>...:...:...
    1bc0:	0000139c 0000139c 00001352 00001344     ........R...D...
    1bd0:	00001358 0000138a 00001424 00001404     X.......$.......
    1be0:	00001404 00001490 00001416 00001432     ............2...
    1bf0:	00001408 00001440 00001480              ....@.......

00001bfc <_init>:
    1bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c02:	bc08      	pop	{r3}
    1c04:	469e      	mov	lr, r3
    1c06:	4770      	bx	lr

00001c08 <__init_array_start>:
    1c08:	000000b5 	.word	0x000000b5

00001c0c <_fini>:
    1c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c12:	bc08      	pop	{r3}
    1c14:	469e      	mov	lr, r3
    1c16:	4770      	bx	lr

00001c18 <__fini_array_start>:
    1c18:	0000008d 	.word	0x0000008d
